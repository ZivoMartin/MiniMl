(*
Explication :

Ce programme définit une fonction sum qui prend une liste d'entiers lst et calcule la somme des éléments.

La fonction sum utilise le motif de correspondance match pour itérer sur la liste. Elle vérifie si la liste est vide ou non, et additionne l'élément de tête x avec le résultat de l'appel récursif sur le reste de la liste.

Le type de sum est une fonction qui prend une liste d'entiers (int list) et retourne un entier (int).

L'appel sum [1; 2; 3; 4] doit donc être typé correctement en fonction du type des éléments de la liste.

Contraintes générées :
Le type de sum est int list -> int.

La contrainte générée pour match lst with ... est : x : int et xs : int list.

L'appel sum [1; 2; 3; 4] doit générer la contrainte : int list = [int; int; int; int].
 *)

let rec sum l = 
  if l = [] then
    0
  else
    (hd l) + (sum (tl l))
let s = sum [1; 2; 3; 4]
