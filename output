Parsed program:
let f =
  let rec aux x y =
    if x = 0 then
      y
    else
      aux (x - 1) (y + 1)
  in
  aux

--Weak typing--
  f : 'c -> 'd -> 'd 
    constraints : [,'b = 'c -> 'd -> 'd,(,'a)'a -> 'a -> bool = 'e -> 'f,'e = 'c,'f = 'g -> 'h,'g = int,int -> int -> int = 'i -> 'j,'i = 'c,'j = 'k -> 'l,'k = int,'b = 'm -> 'n,'m = 'l,int -> int -> int = 'o -> 'p,'o = 'd,'p = 'q -> 'r,'q = int,'n = 's -> 't,'s = 'r,'h = bool,'d = 't]
  ---Solving constraints:
  f : int -> int -> int
  Annotated program:
  let f : int -> int -> int =
    let rec aux (x : int) (y : int) : int =
      if (x : int) = 0 then
        (y : int)
      else
        (aux : int -> int -> int) ((x : int) - 1) ((y : int) + 1)
    in
    (aux : int -> int -> int)
  
  
---Full typing---
   110Types computed:
   f : int -> int -> int
   
   Annotated program:
   let f : int -> int -> int =
     let rec aux (x : int) (y : int) : int =
       if (x : int) = 0 then
         (y : int)
       else
         (aux : int -> int -> int) ((x : int) - 1) ((y : int) + 1)
     in
     (aux : int -> int -> int)
   
   
Execution of the program:
Computed f = <fun>
