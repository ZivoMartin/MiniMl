Parsed program:
let apply f x =
  f x
let i =
  apply (fun n ->
         n + 1) 2
let s =
  apply (fun str ->
         str ^ "!") "yo"

--Weak typing--
  apply : 'b -> 'c -> 'e 
    constraints : [,'b = 'd -> 'e,'d = 'c]
  i : 'o 
    constraints : [,int -> int -> int = 'h -> 'i,'h = 'g,'i = 'j -> 'k,'j = int,'b -> 'c -> 'e = 'l -> 'm,'l = 'g -> 'k,'m = 'n -> 'o,'n = int]
  s : 'y 
    constraints : [,string -> string -> string = 'r -> 's,'r = 'q,'s = 't -> 'u,'t = string,'b -> 'c -> 'e = 'v -> 'w,'v = 'q -> 'u,'w = 'x -> 'y,'x = string]
  ---Solving constraints:
  apply : ('c -> 'e) -> 'c -> 'e
  i : int
  Unable to unify int and string
  Annotated program:
  let apply (f : 'c -> 'e) (x : 'c) : 'e =
    (f : 'c -> 'e) (x : 'c)
  let i : int =
    (apply : (int -> int) -> int -> int) (fun n : int->
                                          (n : int) + 1) 2
  let s : 'y =
    (apply : 'b -> 'c -> 'e) (fun str : 'q->
                              (str : 'q) ^ "!") "yo"
  
  
---Full typing---
   Types computed:
   apply : (,'a,'b)('a -> 'b) -> 'a -> 'b
   i : int
   s : string
   
   Annotated program:
   let apply (f : 'a -> 'b) (x : 'a) : 'b =
     (f : 'a -> 'b) (x : 'a)
   let i : int =
     (apply : (,'a,'b)('a -> 'b) -> 'a -> 'b) (fun n : int->
                                               (n : int) + 1) 2
   let s : string =
     (apply : (,'a,'b)('a -> 'b) -> 'a -> 'b) (fun str : string->
                                               (str : string) ^ "!") "yo"
   
   
Execution of the program:
Computed apply = <fun>
Computed i = 3
Computed s = yo!
