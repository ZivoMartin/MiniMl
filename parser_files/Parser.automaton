State 0:
## Known stack suffix:
##
## LR(1) items:
main' -> . main [ # ]
## Transitions:
-- On LET shift to state 1
-- On req_list shift to state 135
-- On req shift to state 137
-- On main shift to state 139
## Reductions:

State 1:
## Known stack suffix:
## LET
## LR(1) items:
req -> LET . ID EQ expr [ LET EOF ]
req -> LET . REC ID EQ expr [ LET EOF ]
req -> LET . ID sugar_func_decl [ LET EOF ]
req -> LET . REC ID sugar_func_decl [ LET EOF ]
## Transitions:
-- On REC shift to state 2
-- On ID shift to state 131
## Reductions:

State 2:
## Known stack suffix:
## LET REC
## LR(1) items:
req -> LET REC . ID EQ expr [ LET EOF ]
req -> LET REC . ID sugar_func_decl [ LET EOF ]
## Transitions:
-- On ID shift to state 3
## Reductions:

State 3:
## Known stack suffix:
## LET REC ID
## LR(1) items:
req -> LET REC ID . EQ expr [ LET EOF ]
req -> LET REC ID . sugar_func_decl [ LET EOF ]
## Transitions:
-- On ID shift to state 4
-- On EQ shift to state 128
-- On sugar_func_decl shift to state 130
## Reductions:

State 4:
## Known stack suffix:
## ID
## LR(1) items:
sugar_func_decl -> ID . EQ expr [ LET IN EOF ]
sugar_func_decl -> ID . sugar_func_decl [ LET IN EOF ]
## Transitions:
-- On ID shift to state 4
-- On EQ shift to state 5
-- On sugar_func_decl shift to state 127
## Reductions:

State 5:
## Known stack suffix:
## ID EQ
## LR(1) items:
sugar_func_decl -> ID EQ . expr [ LET IN EOF ]
## Transitions:
-- On TAIL shift to state 6
-- On SUB shift to state 7
-- On STRING shift to state 8
-- On PRINT shift to state 9
-- On NOT shift to state 10
-- On NEG shift to state 11
-- On L_SQ shift to state 12
-- On L_PAR shift to state 14
-- On LET shift to state 33
-- On INT shift to state 17
-- On IF shift to state 37
-- On ID shift to state 18
-- On HEAD shift to state 19
-- On FUN shift to state 38
-- On BOOL shift to state 20
-- On simple_expr shift to state 41
-- On rel_expr shift to state 42
-- On or_expr shift to state 64
-- On mul_expr shift to state 44
-- On expr shift to state 126
-- On eq_expr shift to state 66
-- On app_expr shift to state 52
-- On and_expr shift to state 78
-- On add_expr shift to state 69
## Reductions:

State 6:
## Known stack suffix:
## TAIL
## LR(1) items:
simple_expr -> TAIL . [ THEN TAIL SUB STRING SEMICOLON R_SQ R_PAR PRINT OR NOT NEQ NEG MUL MOD L_SQ L_PAR LT LET LEQ INT IN ID HEAD GT GEQ EQ EOF ELSE DIV BOOL AND ADD ]
## Transitions:
## Reductions:
-- On THEN TAIL SUB STRING SEMICOLON R_SQ R_PAR PRINT OR NOT NEQ NEG MUL MOD L_SQ L_PAR LT LET LEQ INT IN ID HEAD GT GEQ EQ EOF ELSE DIV BOOL AND ADD
--   reduce production simple_expr -> TAIL

State 7:
## Known stack suffix:
## SUB
## LR(1) items:
simple_expr -> SUB . simple_expr [ THEN TAIL SUB STRING SEMICOLON R_SQ R_PAR PRINT OR NOT NEQ NEG MUL MOD L_SQ L_PAR LT LET LEQ INT IN ID HEAD GT GEQ EQ EOF ELSE DIV BOOL AND ADD ]
## Transitions:
-- On TAIL shift to state 6
-- On SUB shift to state 7
-- On STRING shift to state 8
-- On PRINT shift to state 9
-- On NOT shift to state 10
-- On NEG shift to state 11
-- On L_SQ shift to state 12
-- On L_PAR shift to state 14
-- On INT shift to state 17
-- On ID shift to state 18
-- On HEAD shift to state 19
-- On BOOL shift to state 20
-- On simple_expr shift to state 21
## Reductions:

State 8:
## Known stack suffix:
## STRING
## LR(1) items:
simple_expr -> STRING . [ THEN TAIL SUB STRING SEMICOLON R_SQ R_PAR PRINT OR NOT NEQ NEG MUL MOD L_SQ L_PAR LT LET LEQ INT IN ID HEAD GT GEQ EQ EOF ELSE DIV BOOL AND ADD ]
## Transitions:
## Reductions:
-- On THEN TAIL SUB STRING SEMICOLON R_SQ R_PAR PRINT OR NOT NEQ NEG MUL MOD L_SQ L_PAR LT LET LEQ INT IN ID HEAD GT GEQ EQ EOF ELSE DIV BOOL AND ADD
--   reduce production simple_expr -> STRING

State 9:
## Known stack suffix:
## PRINT
## LR(1) items:
simple_expr -> PRINT . [ THEN TAIL SUB STRING SEMICOLON R_SQ R_PAR PRINT OR NOT NEQ NEG MUL MOD L_SQ L_PAR LT LET LEQ INT IN ID HEAD GT GEQ EQ EOF ELSE DIV BOOL AND ADD ]
## Transitions:
## Reductions:
-- On THEN TAIL SUB STRING SEMICOLON R_SQ R_PAR PRINT OR NOT NEQ NEG MUL MOD L_SQ L_PAR LT LET LEQ INT IN ID HEAD GT GEQ EQ EOF ELSE DIV BOOL AND ADD
--   reduce production simple_expr -> PRINT

State 10:
## Known stack suffix:
## NOT
## LR(1) items:
simple_expr -> NOT . [ THEN TAIL SUB STRING SEMICOLON R_SQ R_PAR PRINT OR NOT NEQ NEG MUL MOD L_SQ L_PAR LT LET LEQ INT IN ID HEAD GT GEQ EQ EOF ELSE DIV BOOL AND ADD ]
## Transitions:
## Reductions:
-- On THEN TAIL SUB STRING SEMICOLON R_SQ R_PAR PRINT OR NOT NEQ NEG MUL MOD L_SQ L_PAR LT LET LEQ INT IN ID HEAD GT GEQ EQ EOF ELSE DIV BOOL AND ADD
--   reduce production simple_expr -> NOT

State 11:
## Known stack suffix:
## NEG
## LR(1) items:
simple_expr -> NEG . [ THEN TAIL SUB STRING SEMICOLON R_SQ R_PAR PRINT OR NOT NEQ NEG MUL MOD L_SQ L_PAR LT LET LEQ INT IN ID HEAD GT GEQ EQ EOF ELSE DIV BOOL AND ADD ]
## Transitions:
## Reductions:
-- On THEN TAIL SUB STRING SEMICOLON R_SQ R_PAR PRINT OR NOT NEQ NEG MUL MOD L_SQ L_PAR LT LET LEQ INT IN ID HEAD GT GEQ EQ EOF ELSE DIV BOOL AND ADD
--   reduce production simple_expr -> NEG

State 12:
## Known stack suffix:
## L_SQ
## LR(1) items:
simple_expr -> L_SQ . R_SQ [ THEN TAIL SUB STRING SEMICOLON R_SQ R_PAR PRINT OR NOT NEQ NEG MUL MOD L_SQ L_PAR LT LET LEQ INT IN ID HEAD GT GEQ EQ EOF ELSE DIV BOOL AND ADD ]
simple_expr -> L_SQ . list_builder [ THEN TAIL SUB STRING SEMICOLON R_SQ R_PAR PRINT OR NOT NEQ NEG MUL MOD L_SQ L_PAR LT LET LEQ INT IN ID HEAD GT GEQ EQ EOF ELSE DIV BOOL AND ADD ]
## Transitions:
-- On TAIL shift to state 6
-- On SUB shift to state 7
-- On STRING shift to state 8
-- On R_SQ shift to state 13
-- On PRINT shift to state 9
-- On NOT shift to state 10
-- On NEG shift to state 11
-- On L_SQ shift to state 12
-- On L_PAR shift to state 14
-- On LET shift to state 33
-- On INT shift to state 17
-- On IF shift to state 37
-- On ID shift to state 18
-- On HEAD shift to state 19
-- On FUN shift to state 38
-- On BOOL shift to state 20
-- On simple_expr shift to state 41
-- On rel_expr shift to state 42
-- On or_expr shift to state 64
-- On mul_expr shift to state 44
-- On list_builder shift to state 120
-- On expr shift to state 121
-- On eq_expr shift to state 66
-- On app_expr shift to state 52
-- On and_expr shift to state 78
-- On add_expr shift to state 69
## Reductions:

State 13:
## Known stack suffix:
## L_SQ R_SQ
## LR(1) items:
simple_expr -> L_SQ R_SQ . [ THEN TAIL SUB STRING SEMICOLON R_SQ R_PAR PRINT OR NOT NEQ NEG MUL MOD L_SQ L_PAR LT LET LEQ INT IN ID HEAD GT GEQ EQ EOF ELSE DIV BOOL AND ADD ]
## Transitions:
## Reductions:
-- On THEN TAIL SUB STRING SEMICOLON R_SQ R_PAR PRINT OR NOT NEQ NEG MUL MOD L_SQ L_PAR LT LET LEQ INT IN ID HEAD GT GEQ EQ EOF ELSE DIV BOOL AND ADD
--   reduce production simple_expr -> L_SQ R_SQ

State 14:
## Known stack suffix:
## L_PAR
## LR(1) items:
simple_expr -> L_PAR . ADD R_PAR [ THEN TAIL SUB STRING SEMICOLON R_SQ R_PAR PRINT OR NOT NEQ NEG MUL MOD L_SQ L_PAR LT LET LEQ INT IN ID HEAD GT GEQ EQ EOF ELSE DIV BOOL AND ADD ]
simple_expr -> L_PAR . SUB R_PAR [ THEN TAIL SUB STRING SEMICOLON R_SQ R_PAR PRINT OR NOT NEQ NEG MUL MOD L_SQ L_PAR LT LET LEQ INT IN ID HEAD GT GEQ EQ EOF ELSE DIV BOOL AND ADD ]
simple_expr -> L_PAR . MUL R_PAR [ THEN TAIL SUB STRING SEMICOLON R_SQ R_PAR PRINT OR NOT NEQ NEG MUL MOD L_SQ L_PAR LT LET LEQ INT IN ID HEAD GT GEQ EQ EOF ELSE DIV BOOL AND ADD ]
simple_expr -> L_PAR . DIV R_PAR [ THEN TAIL SUB STRING SEMICOLON R_SQ R_PAR PRINT OR NOT NEQ NEG MUL MOD L_SQ L_PAR LT LET LEQ INT IN ID HEAD GT GEQ EQ EOF ELSE DIV BOOL AND ADD ]
simple_expr -> L_PAR . MOD R_PAR [ THEN TAIL SUB STRING SEMICOLON R_SQ R_PAR PRINT OR NOT NEQ NEG MUL MOD L_SQ L_PAR LT LET LEQ INT IN ID HEAD GT GEQ EQ EOF ELSE DIV BOOL AND ADD ]
simple_expr -> L_PAR . AND R_PAR [ THEN TAIL SUB STRING SEMICOLON R_SQ R_PAR PRINT OR NOT NEQ NEG MUL MOD L_SQ L_PAR LT LET LEQ INT IN ID HEAD GT GEQ EQ EOF ELSE DIV BOOL AND ADD ]
simple_expr -> L_PAR . OR R_PAR [ THEN TAIL SUB STRING SEMICOLON R_SQ R_PAR PRINT OR NOT NEQ NEG MUL MOD L_SQ L_PAR LT LET LEQ INT IN ID HEAD GT GEQ EQ EOF ELSE DIV BOOL AND ADD ]
simple_expr -> L_PAR . EQ R_PAR [ THEN TAIL SUB STRING SEMICOLON R_SQ R_PAR PRINT OR NOT NEQ NEG MUL MOD L_SQ L_PAR LT LET LEQ INT IN ID HEAD GT GEQ EQ EOF ELSE DIV BOOL AND ADD ]
simple_expr -> L_PAR . NEQ R_PAR [ THEN TAIL SUB STRING SEMICOLON R_SQ R_PAR PRINT OR NOT NEQ NEG MUL MOD L_SQ L_PAR LT LET LEQ INT IN ID HEAD GT GEQ EQ EOF ELSE DIV BOOL AND ADD ]
simple_expr -> L_PAR . LT R_PAR [ THEN TAIL SUB STRING SEMICOLON R_SQ R_PAR PRINT OR NOT NEQ NEG MUL MOD L_SQ L_PAR LT LET LEQ INT IN ID HEAD GT GEQ EQ EOF ELSE DIV BOOL AND ADD ]
simple_expr -> L_PAR . GT R_PAR [ THEN TAIL SUB STRING SEMICOLON R_SQ R_PAR PRINT OR NOT NEQ NEG MUL MOD L_SQ L_PAR LT LET LEQ INT IN ID HEAD GT GEQ EQ EOF ELSE DIV BOOL AND ADD ]
simple_expr -> L_PAR . LEQ R_PAR [ THEN TAIL SUB STRING SEMICOLON R_SQ R_PAR PRINT OR NOT NEQ NEG MUL MOD L_SQ L_PAR LT LET LEQ INT IN ID HEAD GT GEQ EQ EOF ELSE DIV BOOL AND ADD ]
simple_expr -> L_PAR . GEQ R_PAR [ THEN TAIL SUB STRING SEMICOLON R_SQ R_PAR PRINT OR NOT NEQ NEG MUL MOD L_SQ L_PAR LT LET LEQ INT IN ID HEAD GT GEQ EQ EOF ELSE DIV BOOL AND ADD ]
simple_expr -> L_PAR . CONCAT R_PAR [ THEN TAIL SUB STRING SEMICOLON R_SQ R_PAR PRINT OR NOT NEQ NEG MUL MOD L_SQ L_PAR LT LET LEQ INT IN ID HEAD GT GEQ EQ EOF ELSE DIV BOOL AND ADD ]
simple_expr -> L_PAR . CAT R_PAR [ THEN TAIL SUB STRING SEMICOLON R_SQ R_PAR PRINT OR NOT NEQ NEG MUL MOD L_SQ L_PAR LT LET LEQ INT IN ID HEAD GT GEQ EQ EOF ELSE DIV BOOL AND ADD ]
simple_expr -> L_PAR . APPEND R_PAR [ THEN TAIL SUB STRING SEMICOLON R_SQ R_PAR PRINT OR NOT NEQ NEG MUL MOD L_SQ L_PAR LT LET LEQ INT IN ID HEAD GT GEQ EQ EOF ELSE DIV BOOL AND ADD ]
simple_expr -> L_PAR . R_PAR [ THEN TAIL SUB STRING SEMICOLON R_SQ R_PAR PRINT OR NOT NEQ NEG MUL MOD L_SQ L_PAR LT LET LEQ INT IN ID HEAD GT GEQ EQ EOF ELSE DIV BOOL AND ADD ]
simple_expr -> L_PAR . expr R_PAR [ THEN TAIL SUB STRING SEMICOLON R_SQ R_PAR PRINT OR NOT NEQ NEG MUL MOD L_SQ L_PAR LT LET LEQ INT IN ID HEAD GT GEQ EQ EOF ELSE DIV BOOL AND ADD ]
## Transitions:
-- On TAIL shift to state 6
-- On SUB shift to state 15
-- On STRING shift to state 8
-- On R_PAR shift to state 22
-- On PRINT shift to state 9
-- On OR shift to state 23
-- On NOT shift to state 10
-- On NEQ shift to state 25
-- On NEG shift to state 11
-- On MUL shift to state 27
-- On MOD shift to state 29
-- On L_SQ shift to state 12
-- On L_PAR shift to state 14
-- On LT shift to state 31
-- On LET shift to state 33
-- On LEQ shift to state 98
-- On INT shift to state 17
-- On IF shift to state 37
-- On ID shift to state 18
-- On HEAD shift to state 19
-- On GT shift to state 100
-- On GEQ shift to state 102
-- On FUN shift to state 38
-- On EQ shift to state 104
-- On DIV shift to state 106
-- On CONCAT shift to state 108
-- On CAT shift to state 110
-- On BOOL shift to state 20
-- On APPEND shift to state 112
-- On AND shift to state 114
-- On ADD shift to state 116
-- On simple_expr shift to state 41
-- On rel_expr shift to state 42
-- On or_expr shift to state 64
-- On mul_expr shift to state 44
-- On expr shift to state 118
-- On eq_expr shift to state 66
-- On app_expr shift to state 52
-- On and_expr shift to state 78
-- On add_expr shift to state 69
## Reductions:

State 15:
## Known stack suffix:
## L_PAR SUB
## LR(1) items:
simple_expr -> SUB . simple_expr [ TAIL SUB STRING SEMICOLON R_PAR PRINT OR NOT NEQ NEG MUL MOD L_SQ L_PAR LT LEQ INT ID HEAD GT GEQ EQ DIV BOOL AND ADD ]
simple_expr -> L_PAR SUB . R_PAR [ THEN TAIL SUB STRING SEMICOLON R_SQ R_PAR PRINT OR NOT NEQ NEG MUL MOD L_SQ L_PAR LT LET LEQ INT IN ID HEAD GT GEQ EQ EOF ELSE DIV BOOL AND ADD ]
## Transitions:
-- On TAIL shift to state 6
-- On SUB shift to state 7
-- On STRING shift to state 8
-- On R_PAR shift to state 16
-- On PRINT shift to state 9
-- On NOT shift to state 10
-- On NEG shift to state 11
-- On L_SQ shift to state 12
-- On L_PAR shift to state 14
-- On INT shift to state 17
-- On ID shift to state 18
-- On HEAD shift to state 19
-- On BOOL shift to state 20
-- On simple_expr shift to state 21
## Reductions:

State 16:
## Known stack suffix:
## L_PAR SUB R_PAR
## LR(1) items:
simple_expr -> L_PAR SUB R_PAR . [ THEN TAIL SUB STRING SEMICOLON R_SQ R_PAR PRINT OR NOT NEQ NEG MUL MOD L_SQ L_PAR LT LET LEQ INT IN ID HEAD GT GEQ EQ EOF ELSE DIV BOOL AND ADD ]
## Transitions:
## Reductions:
-- On THEN TAIL SUB STRING SEMICOLON R_SQ R_PAR PRINT OR NOT NEQ NEG MUL MOD L_SQ L_PAR LT LET LEQ INT IN ID HEAD GT GEQ EQ EOF ELSE DIV BOOL AND ADD
--   reduce production simple_expr -> L_PAR SUB R_PAR

State 17:
## Known stack suffix:
## INT
## LR(1) items:
simple_expr -> INT . [ THEN TAIL SUB STRING SEMICOLON R_SQ R_PAR PRINT OR NOT NEQ NEG MUL MOD L_SQ L_PAR LT LET LEQ INT IN ID HEAD GT GEQ EQ EOF ELSE DIV BOOL AND ADD ]
## Transitions:
## Reductions:
-- On THEN TAIL SUB STRING SEMICOLON R_SQ R_PAR PRINT OR NOT NEQ NEG MUL MOD L_SQ L_PAR LT LET LEQ INT IN ID HEAD GT GEQ EQ EOF ELSE DIV BOOL AND ADD
--   reduce production simple_expr -> INT

State 18:
## Known stack suffix:
## ID
## LR(1) items:
simple_expr -> ID . [ THEN TAIL SUB STRING SEMICOLON R_SQ R_PAR PRINT OR NOT NEQ NEG MUL MOD L_SQ L_PAR LT LET LEQ INT IN ID HEAD GT GEQ EQ EOF ELSE DIV BOOL AND ADD ]
## Transitions:
## Reductions:
-- On THEN TAIL SUB STRING SEMICOLON R_SQ R_PAR PRINT OR NOT NEQ NEG MUL MOD L_SQ L_PAR LT LET LEQ INT IN ID HEAD GT GEQ EQ EOF ELSE DIV BOOL AND ADD
--   reduce production simple_expr -> ID

State 19:
## Known stack suffix:
## HEAD
## LR(1) items:
simple_expr -> HEAD . [ THEN TAIL SUB STRING SEMICOLON R_SQ R_PAR PRINT OR NOT NEQ NEG MUL MOD L_SQ L_PAR LT LET LEQ INT IN ID HEAD GT GEQ EQ EOF ELSE DIV BOOL AND ADD ]
## Transitions:
## Reductions:
-- On THEN TAIL SUB STRING SEMICOLON R_SQ R_PAR PRINT OR NOT NEQ NEG MUL MOD L_SQ L_PAR LT LET LEQ INT IN ID HEAD GT GEQ EQ EOF ELSE DIV BOOL AND ADD
--   reduce production simple_expr -> HEAD

State 20:
## Known stack suffix:
## BOOL
## LR(1) items:
simple_expr -> BOOL . [ THEN TAIL SUB STRING SEMICOLON R_SQ R_PAR PRINT OR NOT NEQ NEG MUL MOD L_SQ L_PAR LT LET LEQ INT IN ID HEAD GT GEQ EQ EOF ELSE DIV BOOL AND ADD ]
## Transitions:
## Reductions:
-- On THEN TAIL SUB STRING SEMICOLON R_SQ R_PAR PRINT OR NOT NEQ NEG MUL MOD L_SQ L_PAR LT LET LEQ INT IN ID HEAD GT GEQ EQ EOF ELSE DIV BOOL AND ADD
--   reduce production simple_expr -> BOOL

State 21:
## Known stack suffix:
## SUB simple_expr
## LR(1) items:
simple_expr -> SUB simple_expr . [ THEN TAIL SUB STRING SEMICOLON R_SQ R_PAR PRINT OR NOT NEQ NEG MUL MOD L_SQ L_PAR LT LET LEQ INT IN ID HEAD GT GEQ EQ EOF ELSE DIV BOOL AND ADD ]
## Transitions:
## Reductions:
-- On THEN TAIL SUB STRING SEMICOLON R_SQ R_PAR PRINT OR NOT NEQ NEG MUL MOD L_SQ L_PAR LT LET LEQ INT IN ID HEAD GT GEQ EQ EOF ELSE DIV BOOL AND ADD
--   reduce production simple_expr -> SUB simple_expr

State 22:
## Known stack suffix:
## L_PAR R_PAR
## LR(1) items:
simple_expr -> L_PAR R_PAR . [ THEN TAIL SUB STRING SEMICOLON R_SQ R_PAR PRINT OR NOT NEQ NEG MUL MOD L_SQ L_PAR LT LET LEQ INT IN ID HEAD GT GEQ EQ EOF ELSE DIV BOOL AND ADD ]
## Transitions:
## Reductions:
-- On THEN TAIL SUB STRING SEMICOLON R_SQ R_PAR PRINT OR NOT NEQ NEG MUL MOD L_SQ L_PAR LT LET LEQ INT IN ID HEAD GT GEQ EQ EOF ELSE DIV BOOL AND ADD
--   reduce production simple_expr -> L_PAR R_PAR

State 23:
## Known stack suffix:
## L_PAR OR
## LR(1) items:
simple_expr -> L_PAR OR . R_PAR [ THEN TAIL SUB STRING SEMICOLON R_SQ R_PAR PRINT OR NOT NEQ NEG MUL MOD L_SQ L_PAR LT LET LEQ INT IN ID HEAD GT GEQ EQ EOF ELSE DIV BOOL AND ADD ]
## Transitions:
-- On R_PAR shift to state 24
## Reductions:

State 24:
## Known stack suffix:
## L_PAR OR R_PAR
## LR(1) items:
simple_expr -> L_PAR OR R_PAR . [ THEN TAIL SUB STRING SEMICOLON R_SQ R_PAR PRINT OR NOT NEQ NEG MUL MOD L_SQ L_PAR LT LET LEQ INT IN ID HEAD GT GEQ EQ EOF ELSE DIV BOOL AND ADD ]
## Transitions:
## Reductions:
-- On THEN TAIL SUB STRING SEMICOLON R_SQ R_PAR PRINT OR NOT NEQ NEG MUL MOD L_SQ L_PAR LT LET LEQ INT IN ID HEAD GT GEQ EQ EOF ELSE DIV BOOL AND ADD
--   reduce production simple_expr -> L_PAR OR R_PAR

State 25:
## Known stack suffix:
## L_PAR NEQ
## LR(1) items:
simple_expr -> L_PAR NEQ . R_PAR [ THEN TAIL SUB STRING SEMICOLON R_SQ R_PAR PRINT OR NOT NEQ NEG MUL MOD L_SQ L_PAR LT LET LEQ INT IN ID HEAD GT GEQ EQ EOF ELSE DIV BOOL AND ADD ]
## Transitions:
-- On R_PAR shift to state 26
## Reductions:

State 26:
## Known stack suffix:
## L_PAR NEQ R_PAR
## LR(1) items:
simple_expr -> L_PAR NEQ R_PAR . [ THEN TAIL SUB STRING SEMICOLON R_SQ R_PAR PRINT OR NOT NEQ NEG MUL MOD L_SQ L_PAR LT LET LEQ INT IN ID HEAD GT GEQ EQ EOF ELSE DIV BOOL AND ADD ]
## Transitions:
## Reductions:
-- On THEN TAIL SUB STRING SEMICOLON R_SQ R_PAR PRINT OR NOT NEQ NEG MUL MOD L_SQ L_PAR LT LET LEQ INT IN ID HEAD GT GEQ EQ EOF ELSE DIV BOOL AND ADD
--   reduce production simple_expr -> L_PAR NEQ R_PAR

State 27:
## Known stack suffix:
## L_PAR MUL
## LR(1) items:
simple_expr -> L_PAR MUL . R_PAR [ THEN TAIL SUB STRING SEMICOLON R_SQ R_PAR PRINT OR NOT NEQ NEG MUL MOD L_SQ L_PAR LT LET LEQ INT IN ID HEAD GT GEQ EQ EOF ELSE DIV BOOL AND ADD ]
## Transitions:
-- On R_PAR shift to state 28
## Reductions:

State 28:
## Known stack suffix:
## L_PAR MUL R_PAR
## LR(1) items:
simple_expr -> L_PAR MUL R_PAR . [ THEN TAIL SUB STRING SEMICOLON R_SQ R_PAR PRINT OR NOT NEQ NEG MUL MOD L_SQ L_PAR LT LET LEQ INT IN ID HEAD GT GEQ EQ EOF ELSE DIV BOOL AND ADD ]
## Transitions:
## Reductions:
-- On THEN TAIL SUB STRING SEMICOLON R_SQ R_PAR PRINT OR NOT NEQ NEG MUL MOD L_SQ L_PAR LT LET LEQ INT IN ID HEAD GT GEQ EQ EOF ELSE DIV BOOL AND ADD
--   reduce production simple_expr -> L_PAR MUL R_PAR

State 29:
## Known stack suffix:
## L_PAR MOD
## LR(1) items:
simple_expr -> L_PAR MOD . R_PAR [ THEN TAIL SUB STRING SEMICOLON R_SQ R_PAR PRINT OR NOT NEQ NEG MUL MOD L_SQ L_PAR LT LET LEQ INT IN ID HEAD GT GEQ EQ EOF ELSE DIV BOOL AND ADD ]
## Transitions:
-- On R_PAR shift to state 30
## Reductions:

State 30:
## Known stack suffix:
## L_PAR MOD R_PAR
## LR(1) items:
simple_expr -> L_PAR MOD R_PAR . [ THEN TAIL SUB STRING SEMICOLON R_SQ R_PAR PRINT OR NOT NEQ NEG MUL MOD L_SQ L_PAR LT LET LEQ INT IN ID HEAD GT GEQ EQ EOF ELSE DIV BOOL AND ADD ]
## Transitions:
## Reductions:
-- On THEN TAIL SUB STRING SEMICOLON R_SQ R_PAR PRINT OR NOT NEQ NEG MUL MOD L_SQ L_PAR LT LET LEQ INT IN ID HEAD GT GEQ EQ EOF ELSE DIV BOOL AND ADD
--   reduce production simple_expr -> L_PAR MOD R_PAR

State 31:
## Known stack suffix:
## L_PAR LT
## LR(1) items:
simple_expr -> L_PAR LT . R_PAR [ THEN TAIL SUB STRING SEMICOLON R_SQ R_PAR PRINT OR NOT NEQ NEG MUL MOD L_SQ L_PAR LT LET LEQ INT IN ID HEAD GT GEQ EQ EOF ELSE DIV BOOL AND ADD ]
## Transitions:
-- On R_PAR shift to state 32
## Reductions:

State 32:
## Known stack suffix:
## L_PAR LT R_PAR
## LR(1) items:
simple_expr -> L_PAR LT R_PAR . [ THEN TAIL SUB STRING SEMICOLON R_SQ R_PAR PRINT OR NOT NEQ NEG MUL MOD L_SQ L_PAR LT LET LEQ INT IN ID HEAD GT GEQ EQ EOF ELSE DIV BOOL AND ADD ]
## Transitions:
## Reductions:
-- On THEN TAIL SUB STRING SEMICOLON R_SQ R_PAR PRINT OR NOT NEQ NEG MUL MOD L_SQ L_PAR LT LET LEQ INT IN ID HEAD GT GEQ EQ EOF ELSE DIV BOOL AND ADD
--   reduce production simple_expr -> L_PAR LT R_PAR

State 33:
## Known stack suffix:
## LET
## LR(1) items:
expr -> LET . ID EQ expr IN expr [ THEN SEMICOLON R_SQ R_PAR LET IN EOF ELSE ]
expr -> LET . REC ID EQ expr IN expr [ THEN SEMICOLON R_SQ R_PAR LET IN EOF ELSE ]
expr -> LET . ID sugar_func_decl IN expr [ THEN SEMICOLON R_SQ R_PAR LET IN EOF ELSE ]
expr -> LET . REC ID sugar_func_decl IN expr [ THEN SEMICOLON R_SQ R_PAR LET IN EOF ELSE ]
## Transitions:
-- On REC shift to state 34
-- On ID shift to state 90
## Reductions:

State 34:
## Known stack suffix:
## LET REC
## LR(1) items:
expr -> LET REC . ID EQ expr IN expr [ THEN SEMICOLON R_SQ R_PAR LET IN EOF ELSE ]
expr -> LET REC . ID sugar_func_decl IN expr [ THEN SEMICOLON R_SQ R_PAR LET IN EOF ELSE ]
## Transitions:
-- On ID shift to state 35
## Reductions:

State 35:
## Known stack suffix:
## LET REC ID
## LR(1) items:
expr -> LET REC ID . EQ expr IN expr [ THEN SEMICOLON R_SQ R_PAR LET IN EOF ELSE ]
expr -> LET REC ID . sugar_func_decl IN expr [ THEN SEMICOLON R_SQ R_PAR LET IN EOF ELSE ]
## Transitions:
-- On ID shift to state 4
-- On EQ shift to state 36
-- On sugar_func_decl shift to state 87
## Reductions:

State 36:
## Known stack suffix:
## LET REC ID EQ
## LR(1) items:
expr -> LET REC ID EQ . expr IN expr [ THEN SEMICOLON R_SQ R_PAR LET IN EOF ELSE ]
## Transitions:
-- On TAIL shift to state 6
-- On SUB shift to state 7
-- On STRING shift to state 8
-- On PRINT shift to state 9
-- On NOT shift to state 10
-- On NEG shift to state 11
-- On L_SQ shift to state 12
-- On L_PAR shift to state 14
-- On LET shift to state 33
-- On INT shift to state 17
-- On IF shift to state 37
-- On ID shift to state 18
-- On HEAD shift to state 19
-- On FUN shift to state 38
-- On BOOL shift to state 20
-- On simple_expr shift to state 41
-- On rel_expr shift to state 42
-- On or_expr shift to state 64
-- On mul_expr shift to state 44
-- On expr shift to state 84
-- On eq_expr shift to state 66
-- On app_expr shift to state 52
-- On and_expr shift to state 78
-- On add_expr shift to state 69
## Reductions:

State 37:
## Known stack suffix:
## IF
## LR(1) items:
expr -> IF . expr THEN expr ELSE expr [ THEN SEMICOLON R_SQ R_PAR LET IN EOF ELSE ]
## Transitions:
-- On TAIL shift to state 6
-- On SUB shift to state 7
-- On STRING shift to state 8
-- On PRINT shift to state 9
-- On NOT shift to state 10
-- On NEG shift to state 11
-- On L_SQ shift to state 12
-- On L_PAR shift to state 14
-- On LET shift to state 33
-- On INT shift to state 17
-- On IF shift to state 37
-- On ID shift to state 18
-- On HEAD shift to state 19
-- On FUN shift to state 38
-- On BOOL shift to state 20
-- On simple_expr shift to state 41
-- On rel_expr shift to state 42
-- On or_expr shift to state 64
-- On mul_expr shift to state 44
-- On expr shift to state 79
-- On eq_expr shift to state 66
-- On app_expr shift to state 52
-- On and_expr shift to state 78
-- On add_expr shift to state 69
## Reductions:

State 38:
## Known stack suffix:
## FUN
## LR(1) items:
expr -> FUN . ID ARROW expr [ THEN SEMICOLON R_SQ R_PAR LET IN EOF ELSE ]
## Transitions:
-- On ID shift to state 39
## Reductions:

State 39:
## Known stack suffix:
## FUN ID
## LR(1) items:
expr -> FUN ID . ARROW expr [ THEN SEMICOLON R_SQ R_PAR LET IN EOF ELSE ]
## Transitions:
-- On ARROW shift to state 40
## Reductions:

State 40:
## Known stack suffix:
## FUN ID ARROW
## LR(1) items:
expr -> FUN ID ARROW . expr [ THEN SEMICOLON R_SQ R_PAR LET IN EOF ELSE ]
## Transitions:
-- On TAIL shift to state 6
-- On SUB shift to state 7
-- On STRING shift to state 8
-- On PRINT shift to state 9
-- On NOT shift to state 10
-- On NEG shift to state 11
-- On L_SQ shift to state 12
-- On L_PAR shift to state 14
-- On LET shift to state 33
-- On INT shift to state 17
-- On IF shift to state 37
-- On ID shift to state 18
-- On HEAD shift to state 19
-- On FUN shift to state 38
-- On BOOL shift to state 20
-- On simple_expr shift to state 41
-- On rel_expr shift to state 42
-- On or_expr shift to state 64
-- On mul_expr shift to state 44
-- On expr shift to state 75
-- On eq_expr shift to state 66
-- On app_expr shift to state 52
-- On and_expr shift to state 78
-- On add_expr shift to state 69
## Reductions:

State 41:
## Known stack suffix:
## simple_expr
## LR(1) items:
app_expr -> simple_expr . [ THEN TAIL SUB STRING SEMICOLON R_SQ R_PAR PRINT OR NOT NEQ NEG MUL MOD L_SQ L_PAR LT LET LEQ INT IN ID HEAD GT GEQ EQ EOF ELSE DIV BOOL AND ADD ]
## Transitions:
## Reductions:
-- On THEN TAIL SUB STRING SEMICOLON R_SQ R_PAR PRINT OR NOT NEQ NEG MUL MOD L_SQ L_PAR LT LET LEQ INT IN ID HEAD GT GEQ EQ EOF ELSE DIV BOOL AND ADD
--   reduce production app_expr -> simple_expr

State 42:
## Known stack suffix:
## rel_expr
## LR(1) items:
eq_expr -> rel_expr . [ THEN SEMICOLON R_SQ R_PAR OR NEQ LET IN EQ EOF ELSE AND ]
rel_expr -> rel_expr . LT add_expr [ THEN SEMICOLON R_SQ R_PAR OR NEQ LT LET LEQ IN GT GEQ EQ EOF ELSE AND ]
rel_expr -> rel_expr . LEQ add_expr [ THEN SEMICOLON R_SQ R_PAR OR NEQ LT LET LEQ IN GT GEQ EQ EOF ELSE AND ]
rel_expr -> rel_expr . GT add_expr [ THEN SEMICOLON R_SQ R_PAR OR NEQ LT LET LEQ IN GT GEQ EQ EOF ELSE AND ]
rel_expr -> rel_expr . GEQ add_expr [ THEN SEMICOLON R_SQ R_PAR OR NEQ LT LET LEQ IN GT GEQ EQ EOF ELSE AND ]
## Transitions:
-- On LT shift to state 43
-- On LEQ shift to state 58
-- On GT shift to state 60
-- On GEQ shift to state 62
## Reductions:
-- On THEN SEMICOLON R_SQ R_PAR OR NEQ LET IN EQ EOF ELSE AND
--   reduce production eq_expr -> rel_expr

State 43:
## Known stack suffix:
## rel_expr LT
## LR(1) items:
rel_expr -> rel_expr LT . add_expr [ THEN SEMICOLON R_SQ R_PAR OR NEQ LT LET LEQ IN GT GEQ EQ EOF ELSE AND ]
## Transitions:
-- On TAIL shift to state 6
-- On SUB shift to state 7
-- On STRING shift to state 8
-- On PRINT shift to state 9
-- On NOT shift to state 10
-- On NEG shift to state 11
-- On L_SQ shift to state 12
-- On L_PAR shift to state 14
-- On INT shift to state 17
-- On ID shift to state 18
-- On HEAD shift to state 19
-- On BOOL shift to state 20
-- On simple_expr shift to state 41
-- On mul_expr shift to state 44
-- On app_expr shift to state 52
-- On add_expr shift to state 53
## Reductions:

State 44:
## Known stack suffix:
## mul_expr
## LR(1) items:
add_expr -> mul_expr . [ THEN SUB SEMICOLON R_SQ R_PAR OR NEQ LT LET LEQ IN GT GEQ EQ EOF ELSE AND ADD ]
mul_expr -> mul_expr . MUL app_expr [ THEN SUB SEMICOLON R_SQ R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV AND ADD ]
mul_expr -> mul_expr . DIV app_expr [ THEN SUB SEMICOLON R_SQ R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV AND ADD ]
mul_expr -> mul_expr . MOD app_expr [ THEN SUB SEMICOLON R_SQ R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV AND ADD ]
## Transitions:
-- On MUL shift to state 45
-- On MOD shift to state 48
-- On DIV shift to state 50
## Reductions:
-- On THEN SUB SEMICOLON R_SQ R_PAR OR NEQ LT LET LEQ IN GT GEQ EQ EOF ELSE AND ADD
--   reduce production add_expr -> mul_expr

State 45:
## Known stack suffix:
## mul_expr MUL
## LR(1) items:
mul_expr -> mul_expr MUL . app_expr [ THEN SUB SEMICOLON R_SQ R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV AND ADD ]
## Transitions:
-- On TAIL shift to state 6
-- On SUB shift to state 7
-- On STRING shift to state 8
-- On PRINT shift to state 9
-- On NOT shift to state 10
-- On NEG shift to state 11
-- On L_SQ shift to state 12
-- On L_PAR shift to state 14
-- On INT shift to state 17
-- On ID shift to state 18
-- On HEAD shift to state 19
-- On BOOL shift to state 20
-- On simple_expr shift to state 41
-- On app_expr shift to state 46
## Reductions:

State 46:
## Known stack suffix:
## mul_expr MUL app_expr
## LR(1) items:
app_expr -> app_expr . simple_expr [ THEN TAIL SUB STRING SEMICOLON R_SQ R_PAR PRINT OR NOT NEQ NEG MUL MOD L_SQ L_PAR LT LET LEQ INT IN ID HEAD GT GEQ EQ EOF ELSE DIV BOOL AND ADD ]
mul_expr -> mul_expr MUL app_expr . [ THEN SUB SEMICOLON R_SQ R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV AND ADD ]
## Transitions:
-- On TAIL shift to state 6
-- On STRING shift to state 8
-- On PRINT shift to state 9
-- On NOT shift to state 10
-- On NEG shift to state 11
-- On L_SQ shift to state 12
-- On L_PAR shift to state 14
-- On INT shift to state 17
-- On ID shift to state 18
-- On HEAD shift to state 19
-- On BOOL shift to state 20
-- On simple_expr shift to state 47
## Reductions:
-- On THEN SUB SEMICOLON R_SQ R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV AND ADD
--   reduce production mul_expr -> mul_expr MUL app_expr

State 47:
## Known stack suffix:
## app_expr simple_expr
## LR(1) items:
app_expr -> app_expr simple_expr . [ THEN TAIL SUB STRING SEMICOLON R_SQ R_PAR PRINT OR NOT NEQ NEG MUL MOD L_SQ L_PAR LT LET LEQ INT IN ID HEAD GT GEQ EQ EOF ELSE DIV BOOL AND ADD ]
## Transitions:
## Reductions:
-- On THEN TAIL SUB STRING SEMICOLON R_SQ R_PAR PRINT OR NOT NEQ NEG MUL MOD L_SQ L_PAR LT LET LEQ INT IN ID HEAD GT GEQ EQ EOF ELSE DIV BOOL AND ADD
--   reduce production app_expr -> app_expr simple_expr

State 48:
## Known stack suffix:
## mul_expr MOD
## LR(1) items:
mul_expr -> mul_expr MOD . app_expr [ THEN SUB SEMICOLON R_SQ R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV AND ADD ]
## Transitions:
-- On TAIL shift to state 6
-- On SUB shift to state 7
-- On STRING shift to state 8
-- On PRINT shift to state 9
-- On NOT shift to state 10
-- On NEG shift to state 11
-- On L_SQ shift to state 12
-- On L_PAR shift to state 14
-- On INT shift to state 17
-- On ID shift to state 18
-- On HEAD shift to state 19
-- On BOOL shift to state 20
-- On simple_expr shift to state 41
-- On app_expr shift to state 49
## Reductions:

State 49:
## Known stack suffix:
## mul_expr MOD app_expr
## LR(1) items:
app_expr -> app_expr . simple_expr [ THEN TAIL SUB STRING SEMICOLON R_SQ R_PAR PRINT OR NOT NEQ NEG MUL MOD L_SQ L_PAR LT LET LEQ INT IN ID HEAD GT GEQ EQ EOF ELSE DIV BOOL AND ADD ]
mul_expr -> mul_expr MOD app_expr . [ THEN SUB SEMICOLON R_SQ R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV AND ADD ]
## Transitions:
-- On TAIL shift to state 6
-- On STRING shift to state 8
-- On PRINT shift to state 9
-- On NOT shift to state 10
-- On NEG shift to state 11
-- On L_SQ shift to state 12
-- On L_PAR shift to state 14
-- On INT shift to state 17
-- On ID shift to state 18
-- On HEAD shift to state 19
-- On BOOL shift to state 20
-- On simple_expr shift to state 47
## Reductions:
-- On THEN SUB SEMICOLON R_SQ R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV AND ADD
--   reduce production mul_expr -> mul_expr MOD app_expr

State 50:
## Known stack suffix:
## mul_expr DIV
## LR(1) items:
mul_expr -> mul_expr DIV . app_expr [ THEN SUB SEMICOLON R_SQ R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV AND ADD ]
## Transitions:
-- On TAIL shift to state 6
-- On SUB shift to state 7
-- On STRING shift to state 8
-- On PRINT shift to state 9
-- On NOT shift to state 10
-- On NEG shift to state 11
-- On L_SQ shift to state 12
-- On L_PAR shift to state 14
-- On INT shift to state 17
-- On ID shift to state 18
-- On HEAD shift to state 19
-- On BOOL shift to state 20
-- On simple_expr shift to state 41
-- On app_expr shift to state 51
## Reductions:

State 51:
## Known stack suffix:
## mul_expr DIV app_expr
## LR(1) items:
app_expr -> app_expr . simple_expr [ THEN TAIL SUB STRING SEMICOLON R_SQ R_PAR PRINT OR NOT NEQ NEG MUL MOD L_SQ L_PAR LT LET LEQ INT IN ID HEAD GT GEQ EQ EOF ELSE DIV BOOL AND ADD ]
mul_expr -> mul_expr DIV app_expr . [ THEN SUB SEMICOLON R_SQ R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV AND ADD ]
## Transitions:
-- On TAIL shift to state 6
-- On STRING shift to state 8
-- On PRINT shift to state 9
-- On NOT shift to state 10
-- On NEG shift to state 11
-- On L_SQ shift to state 12
-- On L_PAR shift to state 14
-- On INT shift to state 17
-- On ID shift to state 18
-- On HEAD shift to state 19
-- On BOOL shift to state 20
-- On simple_expr shift to state 47
## Reductions:
-- On THEN SUB SEMICOLON R_SQ R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV AND ADD
--   reduce production mul_expr -> mul_expr DIV app_expr

State 52:
## Known stack suffix:
## app_expr
## LR(1) items:
app_expr -> app_expr . simple_expr [ THEN TAIL SUB STRING SEMICOLON R_SQ R_PAR PRINT OR NOT NEQ NEG MUL MOD L_SQ L_PAR LT LET LEQ INT IN ID HEAD GT GEQ EQ EOF ELSE DIV BOOL AND ADD ]
mul_expr -> app_expr . [ THEN SUB SEMICOLON R_SQ R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV AND ADD ]
## Transitions:
-- On TAIL shift to state 6
-- On SUB shift to state 7
-- On STRING shift to state 8
-- On PRINT shift to state 9
-- On NOT shift to state 10
-- On NEG shift to state 11
-- On L_SQ shift to state 12
-- On L_PAR shift to state 14
-- On INT shift to state 17
-- On ID shift to state 18
-- On HEAD shift to state 19
-- On BOOL shift to state 20
-- On simple_expr shift to state 47
## Reductions:
-- On THEN SUB SEMICOLON R_SQ R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV AND ADD
--   reduce production mul_expr -> app_expr
** Conflict on SUB

State 53:
## Known stack suffix:
## rel_expr LT add_expr
## LR(1) items:
add_expr -> add_expr . ADD mul_expr [ THEN SUB SEMICOLON R_SQ R_PAR OR NEQ LT LET LEQ IN GT GEQ EQ EOF ELSE AND ADD ]
add_expr -> add_expr . SUB mul_expr [ THEN SUB SEMICOLON R_SQ R_PAR OR NEQ LT LET LEQ IN GT GEQ EQ EOF ELSE AND ADD ]
rel_expr -> rel_expr LT add_expr . [ THEN SEMICOLON R_SQ R_PAR OR NEQ LT LET LEQ IN GT GEQ EQ EOF ELSE AND ]
## Transitions:
-- On SUB shift to state 54
-- On ADD shift to state 56
## Reductions:
-- On THEN SEMICOLON R_SQ R_PAR OR NEQ LT LET LEQ IN GT GEQ EQ EOF ELSE AND
--   reduce production rel_expr -> rel_expr LT add_expr

State 54:
## Known stack suffix:
## add_expr SUB
## LR(1) items:
add_expr -> add_expr SUB . mul_expr [ THEN SUB SEMICOLON R_SQ R_PAR OR NEQ LT LET LEQ IN GT GEQ EQ EOF ELSE AND ADD ]
## Transitions:
-- On TAIL shift to state 6
-- On SUB shift to state 7
-- On STRING shift to state 8
-- On PRINT shift to state 9
-- On NOT shift to state 10
-- On NEG shift to state 11
-- On L_SQ shift to state 12
-- On L_PAR shift to state 14
-- On INT shift to state 17
-- On ID shift to state 18
-- On HEAD shift to state 19
-- On BOOL shift to state 20
-- On simple_expr shift to state 41
-- On mul_expr shift to state 55
-- On app_expr shift to state 52
## Reductions:

State 55:
## Known stack suffix:
## add_expr SUB mul_expr
## LR(1) items:
add_expr -> add_expr SUB mul_expr . [ THEN SUB SEMICOLON R_SQ R_PAR OR NEQ LT LET LEQ IN GT GEQ EQ EOF ELSE AND ADD ]
mul_expr -> mul_expr . MUL app_expr [ THEN SUB SEMICOLON R_SQ R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV AND ADD ]
mul_expr -> mul_expr . DIV app_expr [ THEN SUB SEMICOLON R_SQ R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV AND ADD ]
mul_expr -> mul_expr . MOD app_expr [ THEN SUB SEMICOLON R_SQ R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV AND ADD ]
## Transitions:
-- On MUL shift to state 45
-- On MOD shift to state 48
-- On DIV shift to state 50
## Reductions:
-- On THEN SUB SEMICOLON R_SQ R_PAR OR NEQ LT LET LEQ IN GT GEQ EQ EOF ELSE AND ADD
--   reduce production add_expr -> add_expr SUB mul_expr

State 56:
## Known stack suffix:
## add_expr ADD
## LR(1) items:
add_expr -> add_expr ADD . mul_expr [ THEN SUB SEMICOLON R_SQ R_PAR OR NEQ LT LET LEQ IN GT GEQ EQ EOF ELSE AND ADD ]
## Transitions:
-- On TAIL shift to state 6
-- On SUB shift to state 7
-- On STRING shift to state 8
-- On PRINT shift to state 9
-- On NOT shift to state 10
-- On NEG shift to state 11
-- On L_SQ shift to state 12
-- On L_PAR shift to state 14
-- On INT shift to state 17
-- On ID shift to state 18
-- On HEAD shift to state 19
-- On BOOL shift to state 20
-- On simple_expr shift to state 41
-- On mul_expr shift to state 57
-- On app_expr shift to state 52
## Reductions:

State 57:
## Known stack suffix:
## add_expr ADD mul_expr
## LR(1) items:
add_expr -> add_expr ADD mul_expr . [ THEN SUB SEMICOLON R_SQ R_PAR OR NEQ LT LET LEQ IN GT GEQ EQ EOF ELSE AND ADD ]
mul_expr -> mul_expr . MUL app_expr [ THEN SUB SEMICOLON R_SQ R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV AND ADD ]
mul_expr -> mul_expr . DIV app_expr [ THEN SUB SEMICOLON R_SQ R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV AND ADD ]
mul_expr -> mul_expr . MOD app_expr [ THEN SUB SEMICOLON R_SQ R_PAR OR NEQ MUL MOD LT LET LEQ IN GT GEQ EQ EOF ELSE DIV AND ADD ]
## Transitions:
-- On MUL shift to state 45
-- On MOD shift to state 48
-- On DIV shift to state 50
## Reductions:
-- On THEN SUB SEMICOLON R_SQ R_PAR OR NEQ LT LET LEQ IN GT GEQ EQ EOF ELSE AND ADD
--   reduce production add_expr -> add_expr ADD mul_expr

State 58:
## Known stack suffix:
## rel_expr LEQ
## LR(1) items:
rel_expr -> rel_expr LEQ . add_expr [ THEN SEMICOLON R_SQ R_PAR OR NEQ LT LET LEQ IN GT GEQ EQ EOF ELSE AND ]
## Transitions:
-- On TAIL shift to state 6
-- On SUB shift to state 7
-- On STRING shift to state 8
-- On PRINT shift to state 9
-- On NOT shift to state 10
-- On NEG shift to state 11
-- On L_SQ shift to state 12
-- On L_PAR shift to state 14
-- On INT shift to state 17
-- On ID shift to state 18
-- On HEAD shift to state 19
-- On BOOL shift to state 20
-- On simple_expr shift to state 41
-- On mul_expr shift to state 44
-- On app_expr shift to state 52
-- On add_expr shift to state 59
## Reductions:

State 59:
## Known stack suffix:
## rel_expr LEQ add_expr
## LR(1) items:
add_expr -> add_expr . ADD mul_expr [ THEN SUB SEMICOLON R_SQ R_PAR OR NEQ LT LET LEQ IN GT GEQ EQ EOF ELSE AND ADD ]
add_expr -> add_expr . SUB mul_expr [ THEN SUB SEMICOLON R_SQ R_PAR OR NEQ LT LET LEQ IN GT GEQ EQ EOF ELSE AND ADD ]
rel_expr -> rel_expr LEQ add_expr . [ THEN SEMICOLON R_SQ R_PAR OR NEQ LT LET LEQ IN GT GEQ EQ EOF ELSE AND ]
## Transitions:
-- On SUB shift to state 54
-- On ADD shift to state 56
## Reductions:
-- On THEN SEMICOLON R_SQ R_PAR OR NEQ LT LET LEQ IN GT GEQ EQ EOF ELSE AND
--   reduce production rel_expr -> rel_expr LEQ add_expr

State 60:
## Known stack suffix:
## rel_expr GT
## LR(1) items:
rel_expr -> rel_expr GT . add_expr [ THEN SEMICOLON R_SQ R_PAR OR NEQ LT LET LEQ IN GT GEQ EQ EOF ELSE AND ]
## Transitions:
-- On TAIL shift to state 6
-- On SUB shift to state 7
-- On STRING shift to state 8
-- On PRINT shift to state 9
-- On NOT shift to state 10
-- On NEG shift to state 11
-- On L_SQ shift to state 12
-- On L_PAR shift to state 14
-- On INT shift to state 17
-- On ID shift to state 18
-- On HEAD shift to state 19
-- On BOOL shift to state 20
-- On simple_expr shift to state 41
-- On mul_expr shift to state 44
-- On app_expr shift to state 52
-- On add_expr shift to state 61
## Reductions:

State 61:
## Known stack suffix:
## rel_expr GT add_expr
## LR(1) items:
add_expr -> add_expr . ADD mul_expr [ THEN SUB SEMICOLON R_SQ R_PAR OR NEQ LT LET LEQ IN GT GEQ EQ EOF ELSE AND ADD ]
add_expr -> add_expr . SUB mul_expr [ THEN SUB SEMICOLON R_SQ R_PAR OR NEQ LT LET LEQ IN GT GEQ EQ EOF ELSE AND ADD ]
rel_expr -> rel_expr GT add_expr . [ THEN SEMICOLON R_SQ R_PAR OR NEQ LT LET LEQ IN GT GEQ EQ EOF ELSE AND ]
## Transitions:
-- On SUB shift to state 54
-- On ADD shift to state 56
## Reductions:
-- On THEN SEMICOLON R_SQ R_PAR OR NEQ LT LET LEQ IN GT GEQ EQ EOF ELSE AND
--   reduce production rel_expr -> rel_expr GT add_expr

State 62:
## Known stack suffix:
## rel_expr GEQ
## LR(1) items:
rel_expr -> rel_expr GEQ . add_expr [ THEN SEMICOLON R_SQ R_PAR OR NEQ LT LET LEQ IN GT GEQ EQ EOF ELSE AND ]
## Transitions:
-- On TAIL shift to state 6
-- On SUB shift to state 7
-- On STRING shift to state 8
-- On PRINT shift to state 9
-- On NOT shift to state 10
-- On NEG shift to state 11
-- On L_SQ shift to state 12
-- On L_PAR shift to state 14
-- On INT shift to state 17
-- On ID shift to state 18
-- On HEAD shift to state 19
-- On BOOL shift to state 20
-- On simple_expr shift to state 41
-- On mul_expr shift to state 44
-- On app_expr shift to state 52
-- On add_expr shift to state 63
## Reductions:

State 63:
## Known stack suffix:
## rel_expr GEQ add_expr
## LR(1) items:
add_expr -> add_expr . ADD mul_expr [ THEN SUB SEMICOLON R_SQ R_PAR OR NEQ LT LET LEQ IN GT GEQ EQ EOF ELSE AND ADD ]
add_expr -> add_expr . SUB mul_expr [ THEN SUB SEMICOLON R_SQ R_PAR OR NEQ LT LET LEQ IN GT GEQ EQ EOF ELSE AND ADD ]
rel_expr -> rel_expr GEQ add_expr . [ THEN SEMICOLON R_SQ R_PAR OR NEQ LT LET LEQ IN GT GEQ EQ EOF ELSE AND ]
## Transitions:
-- On SUB shift to state 54
-- On ADD shift to state 56
## Reductions:
-- On THEN SEMICOLON R_SQ R_PAR OR NEQ LT LET LEQ IN GT GEQ EQ EOF ELSE AND
--   reduce production rel_expr -> rel_expr GEQ add_expr

State 64:
## Known stack suffix:
## or_expr
## LR(1) items:
expr -> or_expr . [ THEN SEMICOLON R_SQ R_PAR LET IN EOF ELSE ]
or_expr -> or_expr . OR and_expr [ THEN SEMICOLON R_SQ R_PAR OR LET IN EOF ELSE ]
## Transitions:
-- On OR shift to state 65
## Reductions:
-- On THEN SEMICOLON R_SQ R_PAR LET IN EOF ELSE
--   reduce production expr -> or_expr

State 65:
## Known stack suffix:
## or_expr OR
## LR(1) items:
or_expr -> or_expr OR . and_expr [ THEN SEMICOLON R_SQ R_PAR OR LET IN EOF ELSE ]
## Transitions:
-- On TAIL shift to state 6
-- On SUB shift to state 7
-- On STRING shift to state 8
-- On PRINT shift to state 9
-- On NOT shift to state 10
-- On NEG shift to state 11
-- On L_SQ shift to state 12
-- On L_PAR shift to state 14
-- On INT shift to state 17
-- On ID shift to state 18
-- On HEAD shift to state 19
-- On BOOL shift to state 20
-- On simple_expr shift to state 41
-- On rel_expr shift to state 42
-- On mul_expr shift to state 44
-- On eq_expr shift to state 66
-- On app_expr shift to state 52
-- On and_expr shift to state 72
-- On add_expr shift to state 69
## Reductions:

State 66:
## Known stack suffix:
## eq_expr
## LR(1) items:
and_expr -> eq_expr . [ THEN SEMICOLON R_SQ R_PAR OR LET IN EOF ELSE AND ]
eq_expr -> eq_expr . EQ rel_expr [ THEN SEMICOLON R_SQ R_PAR OR NEQ LET IN EQ EOF ELSE AND ]
eq_expr -> eq_expr . NEQ rel_expr [ THEN SEMICOLON R_SQ R_PAR OR NEQ LET IN EQ EOF ELSE AND ]
## Transitions:
-- On NEQ shift to state 67
-- On EQ shift to state 70
## Reductions:
-- On THEN SEMICOLON R_SQ R_PAR OR LET IN EOF ELSE AND
--   reduce production and_expr -> eq_expr

State 67:
## Known stack suffix:
## eq_expr NEQ
## LR(1) items:
eq_expr -> eq_expr NEQ . rel_expr [ THEN SEMICOLON R_SQ R_PAR OR NEQ LET IN EQ EOF ELSE AND ]
## Transitions:
-- On TAIL shift to state 6
-- On SUB shift to state 7
-- On STRING shift to state 8
-- On PRINT shift to state 9
-- On NOT shift to state 10
-- On NEG shift to state 11
-- On L_SQ shift to state 12
-- On L_PAR shift to state 14
-- On INT shift to state 17
-- On ID shift to state 18
-- On HEAD shift to state 19
-- On BOOL shift to state 20
-- On simple_expr shift to state 41
-- On rel_expr shift to state 68
-- On mul_expr shift to state 44
-- On app_expr shift to state 52
-- On add_expr shift to state 69
## Reductions:

State 68:
## Known stack suffix:
## eq_expr NEQ rel_expr
## LR(1) items:
eq_expr -> eq_expr NEQ rel_expr . [ THEN SEMICOLON R_SQ R_PAR OR NEQ LET IN EQ EOF ELSE AND ]
rel_expr -> rel_expr . LT add_expr [ THEN SEMICOLON R_SQ R_PAR OR NEQ LT LET LEQ IN GT GEQ EQ EOF ELSE AND ]
rel_expr -> rel_expr . LEQ add_expr [ THEN SEMICOLON R_SQ R_PAR OR NEQ LT LET LEQ IN GT GEQ EQ EOF ELSE AND ]
rel_expr -> rel_expr . GT add_expr [ THEN SEMICOLON R_SQ R_PAR OR NEQ LT LET LEQ IN GT GEQ EQ EOF ELSE AND ]
rel_expr -> rel_expr . GEQ add_expr [ THEN SEMICOLON R_SQ R_PAR OR NEQ LT LET LEQ IN GT GEQ EQ EOF ELSE AND ]
## Transitions:
-- On LT shift to state 43
-- On LEQ shift to state 58
-- On GT shift to state 60
-- On GEQ shift to state 62
## Reductions:
-- On THEN SEMICOLON R_SQ R_PAR OR NEQ LET IN EQ EOF ELSE AND
--   reduce production eq_expr -> eq_expr NEQ rel_expr

State 69:
## Known stack suffix:
## add_expr
## LR(1) items:
add_expr -> add_expr . ADD mul_expr [ THEN SUB SEMICOLON R_SQ R_PAR OR NEQ LT LET LEQ IN GT GEQ EQ EOF ELSE AND ADD ]
add_expr -> add_expr . SUB mul_expr [ THEN SUB SEMICOLON R_SQ R_PAR OR NEQ LT LET LEQ IN GT GEQ EQ EOF ELSE AND ADD ]
rel_expr -> add_expr . [ THEN SEMICOLON R_SQ R_PAR OR NEQ LT LET LEQ IN GT GEQ EQ EOF ELSE AND ]
## Transitions:
-- On SUB shift to state 54
-- On ADD shift to state 56
## Reductions:
-- On THEN SEMICOLON R_SQ R_PAR OR NEQ LT LET LEQ IN GT GEQ EQ EOF ELSE AND
--   reduce production rel_expr -> add_expr

State 70:
## Known stack suffix:
## eq_expr EQ
## LR(1) items:
eq_expr -> eq_expr EQ . rel_expr [ THEN SEMICOLON R_SQ R_PAR OR NEQ LET IN EQ EOF ELSE AND ]
## Transitions:
-- On TAIL shift to state 6
-- On SUB shift to state 7
-- On STRING shift to state 8
-- On PRINT shift to state 9
-- On NOT shift to state 10
-- On NEG shift to state 11
-- On L_SQ shift to state 12
-- On L_PAR shift to state 14
-- On INT shift to state 17
-- On ID shift to state 18
-- On HEAD shift to state 19
-- On BOOL shift to state 20
-- On simple_expr shift to state 41
-- On rel_expr shift to state 71
-- On mul_expr shift to state 44
-- On app_expr shift to state 52
-- On add_expr shift to state 69
## Reductions:

State 71:
## Known stack suffix:
## eq_expr EQ rel_expr
## LR(1) items:
eq_expr -> eq_expr EQ rel_expr . [ THEN SEMICOLON R_SQ R_PAR OR NEQ LET IN EQ EOF ELSE AND ]
rel_expr -> rel_expr . LT add_expr [ THEN SEMICOLON R_SQ R_PAR OR NEQ LT LET LEQ IN GT GEQ EQ EOF ELSE AND ]
rel_expr -> rel_expr . LEQ add_expr [ THEN SEMICOLON R_SQ R_PAR OR NEQ LT LET LEQ IN GT GEQ EQ EOF ELSE AND ]
rel_expr -> rel_expr . GT add_expr [ THEN SEMICOLON R_SQ R_PAR OR NEQ LT LET LEQ IN GT GEQ EQ EOF ELSE AND ]
rel_expr -> rel_expr . GEQ add_expr [ THEN SEMICOLON R_SQ R_PAR OR NEQ LT LET LEQ IN GT GEQ EQ EOF ELSE AND ]
## Transitions:
-- On LT shift to state 43
-- On LEQ shift to state 58
-- On GT shift to state 60
-- On GEQ shift to state 62
## Reductions:
-- On THEN SEMICOLON R_SQ R_PAR OR NEQ LET IN EQ EOF ELSE AND
--   reduce production eq_expr -> eq_expr EQ rel_expr

State 72:
## Known stack suffix:
## or_expr OR and_expr
## LR(1) items:
and_expr -> and_expr . AND eq_expr [ THEN SEMICOLON R_SQ R_PAR OR LET IN EOF ELSE AND ]
or_expr -> or_expr OR and_expr . [ THEN SEMICOLON R_SQ R_PAR OR LET IN EOF ELSE ]
## Transitions:
-- On AND shift to state 73
## Reductions:
-- On THEN SEMICOLON R_SQ R_PAR OR LET IN EOF ELSE
--   reduce production or_expr -> or_expr OR and_expr

State 73:
## Known stack suffix:
## and_expr AND
## LR(1) items:
and_expr -> and_expr AND . eq_expr [ THEN SEMICOLON R_SQ R_PAR OR LET IN EOF ELSE AND ]
## Transitions:
-- On TAIL shift to state 6
-- On SUB shift to state 7
-- On STRING shift to state 8
-- On PRINT shift to state 9
-- On NOT shift to state 10
-- On NEG shift to state 11
-- On L_SQ shift to state 12
-- On L_PAR shift to state 14
-- On INT shift to state 17
-- On ID shift to state 18
-- On HEAD shift to state 19
-- On BOOL shift to state 20
-- On simple_expr shift to state 41
-- On rel_expr shift to state 42
-- On mul_expr shift to state 44
-- On eq_expr shift to state 74
-- On app_expr shift to state 52
-- On add_expr shift to state 69
## Reductions:

State 74:
## Known stack suffix:
## and_expr AND eq_expr
## LR(1) items:
and_expr -> and_expr AND eq_expr . [ THEN SEMICOLON R_SQ R_PAR OR LET IN EOF ELSE AND ]
eq_expr -> eq_expr . EQ rel_expr [ THEN SEMICOLON R_SQ R_PAR OR NEQ LET IN EQ EOF ELSE AND ]
eq_expr -> eq_expr . NEQ rel_expr [ THEN SEMICOLON R_SQ R_PAR OR NEQ LET IN EQ EOF ELSE AND ]
## Transitions:
-- On NEQ shift to state 67
-- On EQ shift to state 70
## Reductions:
-- On THEN SEMICOLON R_SQ R_PAR OR LET IN EOF ELSE AND
--   reduce production and_expr -> and_expr AND eq_expr

State 75:
## Known stack suffix:
## FUN ID ARROW expr
## LR(1) items:
expr -> expr . SEMICOLON expr [ THEN SEMICOLON R_SQ R_PAR LET IN EOF ELSE ]
expr -> FUN ID ARROW expr . [ THEN SEMICOLON R_SQ R_PAR LET IN EOF ELSE ]
## Transitions:
-- On SEMICOLON shift to state 76
## Reductions:
-- On THEN R_SQ R_PAR LET IN EOF ELSE
--   reduce production expr -> FUN ID ARROW expr

State 76:
## Known stack suffix:
## expr SEMICOLON
## LR(1) items:
expr -> expr SEMICOLON . expr [ THEN SEMICOLON R_SQ R_PAR LET IN EOF ELSE ]
## Transitions:
-- On TAIL shift to state 6
-- On SUB shift to state 7
-- On STRING shift to state 8
-- On PRINT shift to state 9
-- On NOT shift to state 10
-- On NEG shift to state 11
-- On L_SQ shift to state 12
-- On L_PAR shift to state 14
-- On LET shift to state 33
-- On INT shift to state 17
-- On IF shift to state 37
-- On ID shift to state 18
-- On HEAD shift to state 19
-- On FUN shift to state 38
-- On BOOL shift to state 20
-- On simple_expr shift to state 41
-- On rel_expr shift to state 42
-- On or_expr shift to state 64
-- On mul_expr shift to state 44
-- On expr shift to state 77
-- On eq_expr shift to state 66
-- On app_expr shift to state 52
-- On and_expr shift to state 78
-- On add_expr shift to state 69
## Reductions:

State 77:
## Known stack suffix:
## expr SEMICOLON expr
## LR(1) items:
expr -> expr . SEMICOLON expr [ THEN SEMICOLON R_SQ R_PAR LET IN EOF ELSE ]
expr -> expr SEMICOLON expr . [ THEN SEMICOLON R_SQ R_PAR LET IN EOF ELSE ]
## Transitions:
## Reductions:
-- On THEN SEMICOLON R_SQ R_PAR LET IN EOF ELSE
--   reduce production expr -> expr SEMICOLON expr

State 78:
## Known stack suffix:
## and_expr
## LR(1) items:
and_expr -> and_expr . AND eq_expr [ THEN SEMICOLON R_SQ R_PAR OR LET IN EOF ELSE AND ]
or_expr -> and_expr . [ THEN SEMICOLON R_SQ R_PAR OR LET IN EOF ELSE ]
## Transitions:
-- On AND shift to state 73
## Reductions:
-- On THEN SEMICOLON R_SQ R_PAR OR LET IN EOF ELSE
--   reduce production or_expr -> and_expr

State 79:
## Known stack suffix:
## IF expr
## LR(1) items:
expr -> expr . SEMICOLON expr [ THEN SEMICOLON ]
expr -> IF expr . THEN expr ELSE expr [ THEN SEMICOLON R_SQ R_PAR LET IN EOF ELSE ]
## Transitions:
-- On THEN shift to state 80
-- On SEMICOLON shift to state 76
## Reductions:

State 80:
## Known stack suffix:
## IF expr THEN
## LR(1) items:
expr -> IF expr THEN . expr ELSE expr [ THEN SEMICOLON R_SQ R_PAR LET IN EOF ELSE ]
## Transitions:
-- On TAIL shift to state 6
-- On SUB shift to state 7
-- On STRING shift to state 8
-- On PRINT shift to state 9
-- On NOT shift to state 10
-- On NEG shift to state 11
-- On L_SQ shift to state 12
-- On L_PAR shift to state 14
-- On LET shift to state 33
-- On INT shift to state 17
-- On IF shift to state 37
-- On ID shift to state 18
-- On HEAD shift to state 19
-- On FUN shift to state 38
-- On BOOL shift to state 20
-- On simple_expr shift to state 41
-- On rel_expr shift to state 42
-- On or_expr shift to state 64
-- On mul_expr shift to state 44
-- On expr shift to state 81
-- On eq_expr shift to state 66
-- On app_expr shift to state 52
-- On and_expr shift to state 78
-- On add_expr shift to state 69
## Reductions:

State 81:
## Known stack suffix:
## IF expr THEN expr
## LR(1) items:
expr -> expr . SEMICOLON expr [ SEMICOLON ELSE ]
expr -> IF expr THEN expr . ELSE expr [ THEN SEMICOLON R_SQ R_PAR LET IN EOF ELSE ]
## Transitions:
-- On SEMICOLON shift to state 76
-- On ELSE shift to state 82
## Reductions:

State 82:
## Known stack suffix:
## IF expr THEN expr ELSE
## LR(1) items:
expr -> IF expr THEN expr ELSE . expr [ THEN SEMICOLON R_SQ R_PAR LET IN EOF ELSE ]
## Transitions:
-- On TAIL shift to state 6
-- On SUB shift to state 7
-- On STRING shift to state 8
-- On PRINT shift to state 9
-- On NOT shift to state 10
-- On NEG shift to state 11
-- On L_SQ shift to state 12
-- On L_PAR shift to state 14
-- On LET shift to state 33
-- On INT shift to state 17
-- On IF shift to state 37
-- On ID shift to state 18
-- On HEAD shift to state 19
-- On FUN shift to state 38
-- On BOOL shift to state 20
-- On simple_expr shift to state 41
-- On rel_expr shift to state 42
-- On or_expr shift to state 64
-- On mul_expr shift to state 44
-- On expr shift to state 83
-- On eq_expr shift to state 66
-- On app_expr shift to state 52
-- On and_expr shift to state 78
-- On add_expr shift to state 69
## Reductions:

State 83:
## Known stack suffix:
## IF expr THEN expr ELSE expr
## LR(1) items:
expr -> expr . SEMICOLON expr [ THEN SEMICOLON R_SQ R_PAR LET IN EOF ELSE ]
expr -> IF expr THEN expr ELSE expr . [ THEN SEMICOLON R_SQ R_PAR LET IN EOF ELSE ]
## Transitions:
-- On SEMICOLON shift to state 76
## Reductions:
-- On THEN R_SQ R_PAR LET IN EOF ELSE
--   reduce production expr -> IF expr THEN expr ELSE expr

State 84:
## Known stack suffix:
## LET REC ID EQ expr
## LR(1) items:
expr -> expr . SEMICOLON expr [ SEMICOLON IN ]
expr -> LET REC ID EQ expr . IN expr [ THEN SEMICOLON R_SQ R_PAR LET IN EOF ELSE ]
## Transitions:
-- On SEMICOLON shift to state 76
-- On IN shift to state 85
## Reductions:

State 85:
## Known stack suffix:
## LET REC ID EQ expr IN
## LR(1) items:
expr -> LET REC ID EQ expr IN . expr [ THEN SEMICOLON R_SQ R_PAR LET IN EOF ELSE ]
## Transitions:
-- On TAIL shift to state 6
-- On SUB shift to state 7
-- On STRING shift to state 8
-- On PRINT shift to state 9
-- On NOT shift to state 10
-- On NEG shift to state 11
-- On L_SQ shift to state 12
-- On L_PAR shift to state 14
-- On LET shift to state 33
-- On INT shift to state 17
-- On IF shift to state 37
-- On ID shift to state 18
-- On HEAD shift to state 19
-- On FUN shift to state 38
-- On BOOL shift to state 20
-- On simple_expr shift to state 41
-- On rel_expr shift to state 42
-- On or_expr shift to state 64
-- On mul_expr shift to state 44
-- On expr shift to state 86
-- On eq_expr shift to state 66
-- On app_expr shift to state 52
-- On and_expr shift to state 78
-- On add_expr shift to state 69
## Reductions:

State 86:
## Known stack suffix:
## LET REC ID EQ expr IN expr
## LR(1) items:
expr -> expr . SEMICOLON expr [ THEN SEMICOLON R_SQ R_PAR LET IN EOF ELSE ]
expr -> LET REC ID EQ expr IN expr . [ THEN SEMICOLON R_SQ R_PAR LET IN EOF ELSE ]
## Transitions:
-- On SEMICOLON shift to state 76
## Reductions:
-- On THEN R_SQ R_PAR LET IN EOF ELSE
--   reduce production expr -> LET REC ID EQ expr IN expr

State 87:
## Known stack suffix:
## LET REC ID sugar_func_decl
## LR(1) items:
expr -> LET REC ID sugar_func_decl . IN expr [ THEN SEMICOLON R_SQ R_PAR LET IN EOF ELSE ]
## Transitions:
-- On IN shift to state 88
## Reductions:

State 88:
## Known stack suffix:
## LET REC ID sugar_func_decl IN
## LR(1) items:
expr -> LET REC ID sugar_func_decl IN . expr [ THEN SEMICOLON R_SQ R_PAR LET IN EOF ELSE ]
## Transitions:
-- On TAIL shift to state 6
-- On SUB shift to state 7
-- On STRING shift to state 8
-- On PRINT shift to state 9
-- On NOT shift to state 10
-- On NEG shift to state 11
-- On L_SQ shift to state 12
-- On L_PAR shift to state 14
-- On LET shift to state 33
-- On INT shift to state 17
-- On IF shift to state 37
-- On ID shift to state 18
-- On HEAD shift to state 19
-- On FUN shift to state 38
-- On BOOL shift to state 20
-- On simple_expr shift to state 41
-- On rel_expr shift to state 42
-- On or_expr shift to state 64
-- On mul_expr shift to state 44
-- On expr shift to state 89
-- On eq_expr shift to state 66
-- On app_expr shift to state 52
-- On and_expr shift to state 78
-- On add_expr shift to state 69
## Reductions:

State 89:
## Known stack suffix:
## LET REC ID sugar_func_decl IN expr
## LR(1) items:
expr -> expr . SEMICOLON expr [ THEN SEMICOLON R_SQ R_PAR LET IN EOF ELSE ]
expr -> LET REC ID sugar_func_decl IN expr . [ THEN SEMICOLON R_SQ R_PAR LET IN EOF ELSE ]
## Transitions:
-- On SEMICOLON shift to state 76
## Reductions:
-- On THEN R_SQ R_PAR LET IN EOF ELSE
--   reduce production expr -> LET REC ID sugar_func_decl IN expr

State 90:
## Known stack suffix:
## LET ID
## LR(1) items:
expr -> LET ID . EQ expr IN expr [ THEN SEMICOLON R_SQ R_PAR LET IN EOF ELSE ]
expr -> LET ID . sugar_func_decl IN expr [ THEN SEMICOLON R_SQ R_PAR LET IN EOF ELSE ]
## Transitions:
-- On ID shift to state 4
-- On EQ shift to state 91
-- On sugar_func_decl shift to state 95
## Reductions:

State 91:
## Known stack suffix:
## LET ID EQ
## LR(1) items:
expr -> LET ID EQ . expr IN expr [ THEN SEMICOLON R_SQ R_PAR LET IN EOF ELSE ]
## Transitions:
-- On TAIL shift to state 6
-- On SUB shift to state 7
-- On STRING shift to state 8
-- On PRINT shift to state 9
-- On NOT shift to state 10
-- On NEG shift to state 11
-- On L_SQ shift to state 12
-- On L_PAR shift to state 14
-- On LET shift to state 33
-- On INT shift to state 17
-- On IF shift to state 37
-- On ID shift to state 18
-- On HEAD shift to state 19
-- On FUN shift to state 38
-- On BOOL shift to state 20
-- On simple_expr shift to state 41
-- On rel_expr shift to state 42
-- On or_expr shift to state 64
-- On mul_expr shift to state 44
-- On expr shift to state 92
-- On eq_expr shift to state 66
-- On app_expr shift to state 52
-- On and_expr shift to state 78
-- On add_expr shift to state 69
## Reductions:

State 92:
## Known stack suffix:
## LET ID EQ expr
## LR(1) items:
expr -> expr . SEMICOLON expr [ SEMICOLON IN ]
expr -> LET ID EQ expr . IN expr [ THEN SEMICOLON R_SQ R_PAR LET IN EOF ELSE ]
## Transitions:
-- On SEMICOLON shift to state 76
-- On IN shift to state 93
## Reductions:

State 93:
## Known stack suffix:
## LET ID EQ expr IN
## LR(1) items:
expr -> LET ID EQ expr IN . expr [ THEN SEMICOLON R_SQ R_PAR LET IN EOF ELSE ]
## Transitions:
-- On TAIL shift to state 6
-- On SUB shift to state 7
-- On STRING shift to state 8
-- On PRINT shift to state 9
-- On NOT shift to state 10
-- On NEG shift to state 11
-- On L_SQ shift to state 12
-- On L_PAR shift to state 14
-- On LET shift to state 33
-- On INT shift to state 17
-- On IF shift to state 37
-- On ID shift to state 18
-- On HEAD shift to state 19
-- On FUN shift to state 38
-- On BOOL shift to state 20
-- On simple_expr shift to state 41
-- On rel_expr shift to state 42
-- On or_expr shift to state 64
-- On mul_expr shift to state 44
-- On expr shift to state 94
-- On eq_expr shift to state 66
-- On app_expr shift to state 52
-- On and_expr shift to state 78
-- On add_expr shift to state 69
## Reductions:

State 94:
## Known stack suffix:
## LET ID EQ expr IN expr
## LR(1) items:
expr -> expr . SEMICOLON expr [ THEN SEMICOLON R_SQ R_PAR LET IN EOF ELSE ]
expr -> LET ID EQ expr IN expr . [ THEN SEMICOLON R_SQ R_PAR LET IN EOF ELSE ]
## Transitions:
-- On SEMICOLON shift to state 76
## Reductions:
-- On THEN R_SQ R_PAR LET IN EOF ELSE
--   reduce production expr -> LET ID EQ expr IN expr

State 95:
## Known stack suffix:
## LET ID sugar_func_decl
## LR(1) items:
expr -> LET ID sugar_func_decl . IN expr [ THEN SEMICOLON R_SQ R_PAR LET IN EOF ELSE ]
## Transitions:
-- On IN shift to state 96
## Reductions:

State 96:
## Known stack suffix:
## LET ID sugar_func_decl IN
## LR(1) items:
expr -> LET ID sugar_func_decl IN . expr [ THEN SEMICOLON R_SQ R_PAR LET IN EOF ELSE ]
## Transitions:
-- On TAIL shift to state 6
-- On SUB shift to state 7
-- On STRING shift to state 8
-- On PRINT shift to state 9
-- On NOT shift to state 10
-- On NEG shift to state 11
-- On L_SQ shift to state 12
-- On L_PAR shift to state 14
-- On LET shift to state 33
-- On INT shift to state 17
-- On IF shift to state 37
-- On ID shift to state 18
-- On HEAD shift to state 19
-- On FUN shift to state 38
-- On BOOL shift to state 20
-- On simple_expr shift to state 41
-- On rel_expr shift to state 42
-- On or_expr shift to state 64
-- On mul_expr shift to state 44
-- On expr shift to state 97
-- On eq_expr shift to state 66
-- On app_expr shift to state 52
-- On and_expr shift to state 78
-- On add_expr shift to state 69
## Reductions:

State 97:
## Known stack suffix:
## LET ID sugar_func_decl IN expr
## LR(1) items:
expr -> expr . SEMICOLON expr [ THEN SEMICOLON R_SQ R_PAR LET IN EOF ELSE ]
expr -> LET ID sugar_func_decl IN expr . [ THEN SEMICOLON R_SQ R_PAR LET IN EOF ELSE ]
## Transitions:
-- On SEMICOLON shift to state 76
## Reductions:
-- On THEN R_SQ R_PAR LET IN EOF ELSE
--   reduce production expr -> LET ID sugar_func_decl IN expr

State 98:
## Known stack suffix:
## L_PAR LEQ
## LR(1) items:
simple_expr -> L_PAR LEQ . R_PAR [ THEN TAIL SUB STRING SEMICOLON R_SQ R_PAR PRINT OR NOT NEQ NEG MUL MOD L_SQ L_PAR LT LET LEQ INT IN ID HEAD GT GEQ EQ EOF ELSE DIV BOOL AND ADD ]
## Transitions:
-- On R_PAR shift to state 99
## Reductions:

State 99:
## Known stack suffix:
## L_PAR LEQ R_PAR
## LR(1) items:
simple_expr -> L_PAR LEQ R_PAR . [ THEN TAIL SUB STRING SEMICOLON R_SQ R_PAR PRINT OR NOT NEQ NEG MUL MOD L_SQ L_PAR LT LET LEQ INT IN ID HEAD GT GEQ EQ EOF ELSE DIV BOOL AND ADD ]
## Transitions:
## Reductions:
-- On THEN TAIL SUB STRING SEMICOLON R_SQ R_PAR PRINT OR NOT NEQ NEG MUL MOD L_SQ L_PAR LT LET LEQ INT IN ID HEAD GT GEQ EQ EOF ELSE DIV BOOL AND ADD
--   reduce production simple_expr -> L_PAR LEQ R_PAR

State 100:
## Known stack suffix:
## L_PAR GT
## LR(1) items:
simple_expr -> L_PAR GT . R_PAR [ THEN TAIL SUB STRING SEMICOLON R_SQ R_PAR PRINT OR NOT NEQ NEG MUL MOD L_SQ L_PAR LT LET LEQ INT IN ID HEAD GT GEQ EQ EOF ELSE DIV BOOL AND ADD ]
## Transitions:
-- On R_PAR shift to state 101
## Reductions:

State 101:
## Known stack suffix:
## L_PAR GT R_PAR
## LR(1) items:
simple_expr -> L_PAR GT R_PAR . [ THEN TAIL SUB STRING SEMICOLON R_SQ R_PAR PRINT OR NOT NEQ NEG MUL MOD L_SQ L_PAR LT LET LEQ INT IN ID HEAD GT GEQ EQ EOF ELSE DIV BOOL AND ADD ]
## Transitions:
## Reductions:
-- On THEN TAIL SUB STRING SEMICOLON R_SQ R_PAR PRINT OR NOT NEQ NEG MUL MOD L_SQ L_PAR LT LET LEQ INT IN ID HEAD GT GEQ EQ EOF ELSE DIV BOOL AND ADD
--   reduce production simple_expr -> L_PAR GT R_PAR

State 102:
## Known stack suffix:
## L_PAR GEQ
## LR(1) items:
simple_expr -> L_PAR GEQ . R_PAR [ THEN TAIL SUB STRING SEMICOLON R_SQ R_PAR PRINT OR NOT NEQ NEG MUL MOD L_SQ L_PAR LT LET LEQ INT IN ID HEAD GT GEQ EQ EOF ELSE DIV BOOL AND ADD ]
## Transitions:
-- On R_PAR shift to state 103
## Reductions:

State 103:
## Known stack suffix:
## L_PAR GEQ R_PAR
## LR(1) items:
simple_expr -> L_PAR GEQ R_PAR . [ THEN TAIL SUB STRING SEMICOLON R_SQ R_PAR PRINT OR NOT NEQ NEG MUL MOD L_SQ L_PAR LT LET LEQ INT IN ID HEAD GT GEQ EQ EOF ELSE DIV BOOL AND ADD ]
## Transitions:
## Reductions:
-- On THEN TAIL SUB STRING SEMICOLON R_SQ R_PAR PRINT OR NOT NEQ NEG MUL MOD L_SQ L_PAR LT LET LEQ INT IN ID HEAD GT GEQ EQ EOF ELSE DIV BOOL AND ADD
--   reduce production simple_expr -> L_PAR GEQ R_PAR

State 104:
## Known stack suffix:
## L_PAR EQ
## LR(1) items:
simple_expr -> L_PAR EQ . R_PAR [ THEN TAIL SUB STRING SEMICOLON R_SQ R_PAR PRINT OR NOT NEQ NEG MUL MOD L_SQ L_PAR LT LET LEQ INT IN ID HEAD GT GEQ EQ EOF ELSE DIV BOOL AND ADD ]
## Transitions:
-- On R_PAR shift to state 105
## Reductions:

State 105:
## Known stack suffix:
## L_PAR EQ R_PAR
## LR(1) items:
simple_expr -> L_PAR EQ R_PAR . [ THEN TAIL SUB STRING SEMICOLON R_SQ R_PAR PRINT OR NOT NEQ NEG MUL MOD L_SQ L_PAR LT LET LEQ INT IN ID HEAD GT GEQ EQ EOF ELSE DIV BOOL AND ADD ]
## Transitions:
## Reductions:
-- On THEN TAIL SUB STRING SEMICOLON R_SQ R_PAR PRINT OR NOT NEQ NEG MUL MOD L_SQ L_PAR LT LET LEQ INT IN ID HEAD GT GEQ EQ EOF ELSE DIV BOOL AND ADD
--   reduce production simple_expr -> L_PAR EQ R_PAR

State 106:
## Known stack suffix:
## L_PAR DIV
## LR(1) items:
simple_expr -> L_PAR DIV . R_PAR [ THEN TAIL SUB STRING SEMICOLON R_SQ R_PAR PRINT OR NOT NEQ NEG MUL MOD L_SQ L_PAR LT LET LEQ INT IN ID HEAD GT GEQ EQ EOF ELSE DIV BOOL AND ADD ]
## Transitions:
-- On R_PAR shift to state 107
## Reductions:

State 107:
## Known stack suffix:
## L_PAR DIV R_PAR
## LR(1) items:
simple_expr -> L_PAR DIV R_PAR . [ THEN TAIL SUB STRING SEMICOLON R_SQ R_PAR PRINT OR NOT NEQ NEG MUL MOD L_SQ L_PAR LT LET LEQ INT IN ID HEAD GT GEQ EQ EOF ELSE DIV BOOL AND ADD ]
## Transitions:
## Reductions:
-- On THEN TAIL SUB STRING SEMICOLON R_SQ R_PAR PRINT OR NOT NEQ NEG MUL MOD L_SQ L_PAR LT LET LEQ INT IN ID HEAD GT GEQ EQ EOF ELSE DIV BOOL AND ADD
--   reduce production simple_expr -> L_PAR DIV R_PAR

State 108:
## Known stack suffix:
## L_PAR CONCAT
## LR(1) items:
simple_expr -> L_PAR CONCAT . R_PAR [ THEN TAIL SUB STRING SEMICOLON R_SQ R_PAR PRINT OR NOT NEQ NEG MUL MOD L_SQ L_PAR LT LET LEQ INT IN ID HEAD GT GEQ EQ EOF ELSE DIV BOOL AND ADD ]
## Transitions:
-- On R_PAR shift to state 109
## Reductions:

State 109:
## Known stack suffix:
## L_PAR CONCAT R_PAR
## LR(1) items:
simple_expr -> L_PAR CONCAT R_PAR . [ THEN TAIL SUB STRING SEMICOLON R_SQ R_PAR PRINT OR NOT NEQ NEG MUL MOD L_SQ L_PAR LT LET LEQ INT IN ID HEAD GT GEQ EQ EOF ELSE DIV BOOL AND ADD ]
## Transitions:
## Reductions:
-- On THEN TAIL SUB STRING SEMICOLON R_SQ R_PAR PRINT OR NOT NEQ NEG MUL MOD L_SQ L_PAR LT LET LEQ INT IN ID HEAD GT GEQ EQ EOF ELSE DIV BOOL AND ADD
--   reduce production simple_expr -> L_PAR CONCAT R_PAR

State 110:
## Known stack suffix:
## L_PAR CAT
## LR(1) items:
simple_expr -> L_PAR CAT . R_PAR [ THEN TAIL SUB STRING SEMICOLON R_SQ R_PAR PRINT OR NOT NEQ NEG MUL MOD L_SQ L_PAR LT LET LEQ INT IN ID HEAD GT GEQ EQ EOF ELSE DIV BOOL AND ADD ]
## Transitions:
-- On R_PAR shift to state 111
## Reductions:

State 111:
## Known stack suffix:
## L_PAR CAT R_PAR
## LR(1) items:
simple_expr -> L_PAR CAT R_PAR . [ THEN TAIL SUB STRING SEMICOLON R_SQ R_PAR PRINT OR NOT NEQ NEG MUL MOD L_SQ L_PAR LT LET LEQ INT IN ID HEAD GT GEQ EQ EOF ELSE DIV BOOL AND ADD ]
## Transitions:
## Reductions:
-- On THEN TAIL SUB STRING SEMICOLON R_SQ R_PAR PRINT OR NOT NEQ NEG MUL MOD L_SQ L_PAR LT LET LEQ INT IN ID HEAD GT GEQ EQ EOF ELSE DIV BOOL AND ADD
--   reduce production simple_expr -> L_PAR CAT R_PAR

State 112:
## Known stack suffix:
## L_PAR APPEND
## LR(1) items:
simple_expr -> L_PAR APPEND . R_PAR [ THEN TAIL SUB STRING SEMICOLON R_SQ R_PAR PRINT OR NOT NEQ NEG MUL MOD L_SQ L_PAR LT LET LEQ INT IN ID HEAD GT GEQ EQ EOF ELSE DIV BOOL AND ADD ]
## Transitions:
-- On R_PAR shift to state 113
## Reductions:

State 113:
## Known stack suffix:
## L_PAR APPEND R_PAR
## LR(1) items:
simple_expr -> L_PAR APPEND R_PAR . [ THEN TAIL SUB STRING SEMICOLON R_SQ R_PAR PRINT OR NOT NEQ NEG MUL MOD L_SQ L_PAR LT LET LEQ INT IN ID HEAD GT GEQ EQ EOF ELSE DIV BOOL AND ADD ]
## Transitions:
## Reductions:
-- On THEN TAIL SUB STRING SEMICOLON R_SQ R_PAR PRINT OR NOT NEQ NEG MUL MOD L_SQ L_PAR LT LET LEQ INT IN ID HEAD GT GEQ EQ EOF ELSE DIV BOOL AND ADD
--   reduce production simple_expr -> L_PAR APPEND R_PAR

State 114:
## Known stack suffix:
## L_PAR AND
## LR(1) items:
simple_expr -> L_PAR AND . R_PAR [ THEN TAIL SUB STRING SEMICOLON R_SQ R_PAR PRINT OR NOT NEQ NEG MUL MOD L_SQ L_PAR LT LET LEQ INT IN ID HEAD GT GEQ EQ EOF ELSE DIV BOOL AND ADD ]
## Transitions:
-- On R_PAR shift to state 115
## Reductions:

State 115:
## Known stack suffix:
## L_PAR AND R_PAR
## LR(1) items:
simple_expr -> L_PAR AND R_PAR . [ THEN TAIL SUB STRING SEMICOLON R_SQ R_PAR PRINT OR NOT NEQ NEG MUL MOD L_SQ L_PAR LT LET LEQ INT IN ID HEAD GT GEQ EQ EOF ELSE DIV BOOL AND ADD ]
## Transitions:
## Reductions:
-- On THEN TAIL SUB STRING SEMICOLON R_SQ R_PAR PRINT OR NOT NEQ NEG MUL MOD L_SQ L_PAR LT LET LEQ INT IN ID HEAD GT GEQ EQ EOF ELSE DIV BOOL AND ADD
--   reduce production simple_expr -> L_PAR AND R_PAR

State 116:
## Known stack suffix:
## L_PAR ADD
## LR(1) items:
simple_expr -> L_PAR ADD . R_PAR [ THEN TAIL SUB STRING SEMICOLON R_SQ R_PAR PRINT OR NOT NEQ NEG MUL MOD L_SQ L_PAR LT LET LEQ INT IN ID HEAD GT GEQ EQ EOF ELSE DIV BOOL AND ADD ]
## Transitions:
-- On R_PAR shift to state 117
## Reductions:

State 117:
## Known stack suffix:
## L_PAR ADD R_PAR
## LR(1) items:
simple_expr -> L_PAR ADD R_PAR . [ THEN TAIL SUB STRING SEMICOLON R_SQ R_PAR PRINT OR NOT NEQ NEG MUL MOD L_SQ L_PAR LT LET LEQ INT IN ID HEAD GT GEQ EQ EOF ELSE DIV BOOL AND ADD ]
## Transitions:
## Reductions:
-- On THEN TAIL SUB STRING SEMICOLON R_SQ R_PAR PRINT OR NOT NEQ NEG MUL MOD L_SQ L_PAR LT LET LEQ INT IN ID HEAD GT GEQ EQ EOF ELSE DIV BOOL AND ADD
--   reduce production simple_expr -> L_PAR ADD R_PAR

State 118:
## Known stack suffix:
## L_PAR expr
## LR(1) items:
expr -> expr . SEMICOLON expr [ SEMICOLON R_PAR ]
simple_expr -> L_PAR expr . R_PAR [ THEN TAIL SUB STRING SEMICOLON R_SQ R_PAR PRINT OR NOT NEQ NEG MUL MOD L_SQ L_PAR LT LET LEQ INT IN ID HEAD GT GEQ EQ EOF ELSE DIV BOOL AND ADD ]
## Transitions:
-- On SEMICOLON shift to state 76
-- On R_PAR shift to state 119
## Reductions:

State 119:
## Known stack suffix:
## L_PAR expr R_PAR
## LR(1) items:
simple_expr -> L_PAR expr R_PAR . [ THEN TAIL SUB STRING SEMICOLON R_SQ R_PAR PRINT OR NOT NEQ NEG MUL MOD L_SQ L_PAR LT LET LEQ INT IN ID HEAD GT GEQ EQ EOF ELSE DIV BOOL AND ADD ]
## Transitions:
## Reductions:
-- On THEN TAIL SUB STRING SEMICOLON R_SQ R_PAR PRINT OR NOT NEQ NEG MUL MOD L_SQ L_PAR LT LET LEQ INT IN ID HEAD GT GEQ EQ EOF ELSE DIV BOOL AND ADD
--   reduce production simple_expr -> L_PAR expr R_PAR

State 120:
## Known stack suffix:
## L_SQ list_builder
## LR(1) items:
simple_expr -> L_SQ list_builder . [ THEN TAIL SUB STRING SEMICOLON R_SQ R_PAR PRINT OR NOT NEQ NEG MUL MOD L_SQ L_PAR LT LET LEQ INT IN ID HEAD GT GEQ EQ EOF ELSE DIV BOOL AND ADD ]
## Transitions:
## Reductions:
-- On THEN TAIL SUB STRING SEMICOLON R_SQ R_PAR PRINT OR NOT NEQ NEG MUL MOD L_SQ L_PAR LT LET LEQ INT IN ID HEAD GT GEQ EQ EOF ELSE DIV BOOL AND ADD
--   reduce production simple_expr -> L_SQ list_builder

State 121:
## Known stack suffix:
## expr
## LR(1) items:
expr -> expr . SEMICOLON expr [ SEMICOLON R_SQ ]
list_builder -> expr . R_SQ [ THEN TAIL SUB STRING SEMICOLON R_SQ R_PAR PRINT OR NOT NEQ NEG MUL MOD L_SQ L_PAR LT LET LEQ INT IN ID HEAD GT GEQ EQ EOF ELSE DIV BOOL AND ADD ]
list_builder -> expr . SEMICOLON list_builder [ THEN TAIL SUB STRING SEMICOLON R_SQ R_PAR PRINT OR NOT NEQ NEG MUL MOD L_SQ L_PAR LT LET LEQ INT IN ID HEAD GT GEQ EQ EOF ELSE DIV BOOL AND ADD ]
## Transitions:
-- On SEMICOLON shift to state 122
-- On R_SQ shift to state 125
## Reductions:

State 122:
## Known stack suffix:
## expr SEMICOLON
## LR(1) items:
expr -> expr SEMICOLON . expr [ SEMICOLON R_SQ ]
list_builder -> expr SEMICOLON . list_builder [ THEN TAIL SUB STRING SEMICOLON R_SQ R_PAR PRINT OR NOT NEQ NEG MUL MOD L_SQ L_PAR LT LET LEQ INT IN ID HEAD GT GEQ EQ EOF ELSE DIV BOOL AND ADD ]
## Transitions:
-- On TAIL shift to state 6
-- On SUB shift to state 7
-- On STRING shift to state 8
-- On PRINT shift to state 9
-- On NOT shift to state 10
-- On NEG shift to state 11
-- On L_SQ shift to state 12
-- On L_PAR shift to state 14
-- On LET shift to state 33
-- On INT shift to state 17
-- On IF shift to state 37
-- On ID shift to state 18
-- On HEAD shift to state 19
-- On FUN shift to state 38
-- On BOOL shift to state 20
-- On simple_expr shift to state 41
-- On rel_expr shift to state 42
-- On or_expr shift to state 64
-- On mul_expr shift to state 44
-- On list_builder shift to state 123
-- On expr shift to state 124
-- On eq_expr shift to state 66
-- On app_expr shift to state 52
-- On and_expr shift to state 78
-- On add_expr shift to state 69
## Reductions:

State 123:
## Known stack suffix:
## expr SEMICOLON list_builder
## LR(1) items:
list_builder -> expr SEMICOLON list_builder . [ THEN TAIL SUB STRING SEMICOLON R_SQ R_PAR PRINT OR NOT NEQ NEG MUL MOD L_SQ L_PAR LT LET LEQ INT IN ID HEAD GT GEQ EQ EOF ELSE DIV BOOL AND ADD ]
## Transitions:
## Reductions:
-- On THEN TAIL SUB STRING SEMICOLON R_SQ R_PAR PRINT OR NOT NEQ NEG MUL MOD L_SQ L_PAR LT LET LEQ INT IN ID HEAD GT GEQ EQ EOF ELSE DIV BOOL AND ADD
--   reduce production list_builder -> expr SEMICOLON list_builder

State 124:
## Known stack suffix:
## expr SEMICOLON expr
## LR(1) items:
expr -> expr . SEMICOLON expr [ SEMICOLON R_SQ ]
expr -> expr SEMICOLON expr . [ SEMICOLON R_SQ ]
list_builder -> expr . R_SQ [ THEN TAIL SUB STRING SEMICOLON R_SQ R_PAR PRINT OR NOT NEQ NEG MUL MOD L_SQ L_PAR LT LET LEQ INT IN ID HEAD GT GEQ EQ EOF ELSE DIV BOOL AND ADD ]
list_builder -> expr . SEMICOLON list_builder [ THEN TAIL SUB STRING SEMICOLON R_SQ R_PAR PRINT OR NOT NEQ NEG MUL MOD L_SQ L_PAR LT LET LEQ INT IN ID HEAD GT GEQ EQ EOF ELSE DIV BOOL AND ADD ]
## Transitions:
-- On R_SQ shift to state 125
## Reductions:
-- On SEMICOLON R_SQ
--   reduce production expr -> expr SEMICOLON expr
** Conflict on R_SQ

State 125:
## Known stack suffix:
## expr R_SQ
## LR(1) items:
list_builder -> expr R_SQ . [ THEN TAIL SUB STRING SEMICOLON R_SQ R_PAR PRINT OR NOT NEQ NEG MUL MOD L_SQ L_PAR LT LET LEQ INT IN ID HEAD GT GEQ EQ EOF ELSE DIV BOOL AND ADD ]
## Transitions:
## Reductions:
-- On THEN TAIL SUB STRING SEMICOLON R_SQ R_PAR PRINT OR NOT NEQ NEG MUL MOD L_SQ L_PAR LT LET LEQ INT IN ID HEAD GT GEQ EQ EOF ELSE DIV BOOL AND ADD
--   reduce production list_builder -> expr R_SQ

State 126:
## Known stack suffix:
## ID EQ expr
## LR(1) items:
expr -> expr . SEMICOLON expr [ SEMICOLON LET IN EOF ]
sugar_func_decl -> ID EQ expr . [ LET IN EOF ]
## Transitions:
-- On SEMICOLON shift to state 76
## Reductions:
-- On LET IN EOF
--   reduce production sugar_func_decl -> ID EQ expr

State 127:
## Known stack suffix:
## ID sugar_func_decl
## LR(1) items:
sugar_func_decl -> ID sugar_func_decl . [ LET IN EOF ]
## Transitions:
## Reductions:
-- On LET IN EOF
--   reduce production sugar_func_decl -> ID sugar_func_decl

State 128:
## Known stack suffix:
## LET REC ID EQ
## LR(1) items:
req -> LET REC ID EQ . expr [ LET EOF ]
## Transitions:
-- On TAIL shift to state 6
-- On SUB shift to state 7
-- On STRING shift to state 8
-- On PRINT shift to state 9
-- On NOT shift to state 10
-- On NEG shift to state 11
-- On L_SQ shift to state 12
-- On L_PAR shift to state 14
-- On LET shift to state 33
-- On INT shift to state 17
-- On IF shift to state 37
-- On ID shift to state 18
-- On HEAD shift to state 19
-- On FUN shift to state 38
-- On BOOL shift to state 20
-- On simple_expr shift to state 41
-- On rel_expr shift to state 42
-- On or_expr shift to state 64
-- On mul_expr shift to state 44
-- On expr shift to state 129
-- On eq_expr shift to state 66
-- On app_expr shift to state 52
-- On and_expr shift to state 78
-- On add_expr shift to state 69
## Reductions:

State 129:
## Known stack suffix:
## LET REC ID EQ expr
## LR(1) items:
expr -> expr . SEMICOLON expr [ SEMICOLON LET EOF ]
req -> LET REC ID EQ expr . [ LET EOF ]
## Transitions:
-- On SEMICOLON shift to state 76
## Reductions:
-- On LET EOF
--   reduce production req -> LET REC ID EQ expr

State 130:
## Known stack suffix:
## LET REC ID sugar_func_decl
## LR(1) items:
req -> LET REC ID sugar_func_decl . [ LET EOF ]
## Transitions:
## Reductions:
-- On LET EOF
--   reduce production req -> LET REC ID sugar_func_decl

State 131:
## Known stack suffix:
## LET ID
## LR(1) items:
req -> LET ID . EQ expr [ LET EOF ]
req -> LET ID . sugar_func_decl [ LET EOF ]
## Transitions:
-- On ID shift to state 4
-- On EQ shift to state 132
-- On sugar_func_decl shift to state 134
## Reductions:

State 132:
## Known stack suffix:
## LET ID EQ
## LR(1) items:
req -> LET ID EQ . expr [ LET EOF ]
## Transitions:
-- On TAIL shift to state 6
-- On SUB shift to state 7
-- On STRING shift to state 8
-- On PRINT shift to state 9
-- On NOT shift to state 10
-- On NEG shift to state 11
-- On L_SQ shift to state 12
-- On L_PAR shift to state 14
-- On LET shift to state 33
-- On INT shift to state 17
-- On IF shift to state 37
-- On ID shift to state 18
-- On HEAD shift to state 19
-- On FUN shift to state 38
-- On BOOL shift to state 20
-- On simple_expr shift to state 41
-- On rel_expr shift to state 42
-- On or_expr shift to state 64
-- On mul_expr shift to state 44
-- On expr shift to state 133
-- On eq_expr shift to state 66
-- On app_expr shift to state 52
-- On and_expr shift to state 78
-- On add_expr shift to state 69
## Reductions:

State 133:
## Known stack suffix:
## LET ID EQ expr
## LR(1) items:
expr -> expr . SEMICOLON expr [ SEMICOLON LET EOF ]
req -> LET ID EQ expr . [ LET EOF ]
## Transitions:
-- On SEMICOLON shift to state 76
## Reductions:
-- On LET EOF
--   reduce production req -> LET ID EQ expr

State 134:
## Known stack suffix:
## LET ID sugar_func_decl
## LR(1) items:
req -> LET ID sugar_func_decl . [ LET EOF ]
## Transitions:
## Reductions:
-- On LET EOF
--   reduce production req -> LET ID sugar_func_decl

State 135:
## Known stack suffix:
## req_list
## LR(1) items:
main -> req_list . EOF [ # ]
## Transitions:
-- On EOF shift to state 136
## Reductions:

State 136:
## Known stack suffix:
## req_list EOF
## LR(1) items:
main -> req_list EOF . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production main -> req_list EOF

State 137:
## Known stack suffix:
## req
## LR(1) items:
req_list -> req . req_list [ EOF ]
req_list -> req . [ EOF ]
## Transitions:
-- On LET shift to state 1
-- On req_list shift to state 138
-- On req shift to state 137
## Reductions:
-- On EOF
--   reduce production req_list -> req

State 138:
## Known stack suffix:
## req req_list
## LR(1) items:
req_list -> req req_list . [ EOF ]
## Transitions:
## Reductions:
-- On EOF
--   reduce production req_list -> req req_list

State 139:
## Known stack suffix:
## main
## LR(1) items:
main' -> main . [ # ]
## Transitions:
## Reductions:
-- On #
--   accept main

